
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 574
#define YY_END_OF_BUFFER 575
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[4047] =
    {   0,
        0,    0,  575,  573,  572,  572,  567,  573,  552,  563,
      546,  547,  550,  549,  544,  548,   56,  551,   58,   58,
      554,  541,  556,  545,  555,  553,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  558,  557,  565,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  542,  564,
      543,  566,  560,    0,  533,    0,  540,  568,  538,  534,
      536,  535,  537,  531,    2,    1,  539,  532,   58,    0,
        0,  570,  562,  559,  561,  571,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,    0,  529,  529,  529,  529,  529,  529,  529,
      529,  181,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,   19,  529,  529,  529,  529,
      529,  529,   16,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  569,    0,  531,  531,    0,  532,    0,
      530,   57,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  178,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,   18,  529,  529,  529,    6,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,    0,  531,    0,  531,    0,  532,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  100,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,   59,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,   17,  529,  529,  529,
      529,  529,   14,  529,  529,   10,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,    0,  531,  529,  112,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,   60,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  105,  529,  529,  186,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,   43,   13,    4,  529,
      529,  529,  529,  529,   42,  529,  529,  529,  529,  529,
       37,  529,  529,  529,  529,  529,  529,   12,  529,   32,
       24,  529,   20,  113,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      104,  529,  103,  529,  529,  529,  529,  182,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
       46,  529,  529,  529,  529,  529,  529,  529,  529,  529,
       33,  529,  529,  529,  529,   51,  529,  529,   15,  529,
      529,   34,  529,    5,  529,    7,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,   99,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  114,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  101,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,   45,
      529,   36,  529,   11,  529,    3,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  108,  529,  529,  529,  529,  529,
      529,  529,  177,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  431,  529,
      406,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  115,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  173,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,    9,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  106,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  240,  239,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  107,  111,  529,  397,  529,
      529,  401,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  404,
      529,  405,  529,  102,  183,  529,  529,  529,  529,  529,
      345,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  338,  529,  529,  529,  329,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  521,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,   38,   27,  529,  529,  529,  529,  529,  529,  529,
       35,  529,  529,  529,  529,  529,  529,  529,  529,   25,
      529,  529,  529,  529,   77,   82,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  122,  529,  529,  529,  529,  529,  529,  529,  184,
      529,  529,  529,  529,  529,  529,  229,  231,  529,  233,
      230,  529,  529,  529,  529,  529,  529,  529,  399,  398,
      529,  529,  529,  529,  529,  164,  165,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      341,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  185,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      171,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
       47,  529,  529,  529,  529,   49,  529,  529,  529,   52,
        8,  529,  529,  529,   22,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  199,  529,
      529,  202,  192,  529,  203,  205,  529,  529,  215,  529,
      529,  220,  529,  529,  529,  529,  207,  529,  204,  206,
      529,  529,  212,  529,  529,  219,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  116,
      529,  529,  529,  529,  529,  238,  529,  241,  529,  529,
      529,  529,  529,  529,  458,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  234,  529,
      232,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      163,  529,  162,  529,  529,  529,  529,  529,  529,  529,
      529,  432,  529,  403,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  344,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  476,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  172,  174,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  189,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,   53,
      529,   21,   23,  529,  529,  529,  529,   71,   79,  529,
      529,  529,  529,   80,  529,  218,  191,  529,  529,  529,

      197,  195,  211,  217,  529,  210,  216,  201,  529,  198,
      196,  209,  214,  529,  208,  213,  529,  529,  529,   96,
       85,  529,  529,  529,  529,  154,  529,  529,  529,  529,
      529,  529,  529,  529,  117,  123,  529,  118,  529,  529,
      529,  245,  242,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  168,  167,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  335,  331,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  340,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      170,  176,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,   55,  529,  529,
       50,   48,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,   75,   78,  529,  529,  529,  529,  200,  529,
       94,  529,  529,  529,  529,  529,  150,  529,  160,  156,
      529,  152,  151,  529,  529,  529,  529,  529,  119,  529,
      529,  529,  529,  187,  529,  529,  459,  529,  147,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  421,  529,  529,  422,
      529,  529,  529,  426,  400,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  402,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  332,  529,  529,  529,  529,  529,  330,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  337,  339,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  346,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  486,
      529,  488,  529,  529,  529,  175,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  190,   40,   28,
      529,   54,  529,  529,   39,  529,  529,  529,  529,  529,
      529,  529,   73,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  157,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      148,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  423,  529,  529,  529,  529,  529,  169,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  374,  529,  529,  529,  529,  529,  372,  529,
      529,  529,  370,  529,  529,  529,  529,  529,  378,  529,
      373,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  367,  529,  529,  529,  529,  529,
      529,  529,  352,  529,  529,  529,  351,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  279,  529,  529,
      529,  529,  529,  282,  529,  529,  529,  529,  188,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,   65,   61,  529,  529,   66,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,   30,  529,
      529,  529,  529,   84,   81,   74,   76,  529,  529,  529,
      529,  529,  529,   89,  529,  529,  529,  529,   95,  529,
      529,  529,  529,  153,  529,  529,  529,  529,  529,  529,
      529,  529,  124,  529,  529,  529,  244,  243,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  138,

      529,  529,  529,  529,  529,  109,  529,  529,  529,  430,
      529,  529,  529,  166,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  382,  529,  529,
      529,  529,  380,  529,  529,  342,  529,  379,  529,  529,
      387,  529,  343,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      369,  529,  366,  529,  529,  529,  529,  348,  529,  529,
      350,  529,  529,  529,  529,  529,  251,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
       62,   63,   64,  529,  529,  529,  529,  487,  489,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,   26,  529,  529,  529,   83,
      529,  529,  529,  529,  529,  529,  193,  194,  529,   88,
      529,  529,  529,  529,  529,  529,  529,  158,  480,  529,
      529,  481,  529,  479,  529,  529,  529,  120,  529,  529,

      529,  462,  529,  529,  529,  529,  529,  529,  139,  140,
      529,  237,  529,  235,  529,  529,  424,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  126,  529,  529,  529,  529,  529,  375,  371,
      529,  529,  381,  529,  383,  385,  529,  529,  355,  529,
      356,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  333,  529,  529,  529,  334,
      529,  529,  529,  353,  349,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  268,  529,  529,  269,  529,  280,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  525,  529,  529,  529,  529,  474,  475,
      529,  529,  529,  529,  529,  529,  529,  529,  304,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  291,  529,  529,  529,  529,  529,
      529,  529,   72,  227,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  149,  529,  477,  482,  483,
      529,  485,  529,  121,  529,  529,  529,  529,  529,  146,

      529,  529,  137,  236,  110,  529,  529,  425,  529,  529,
      529,  529,  529,  529,  468,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  247,
      130,  529,  529,  529,  529,  529,  529,  529,  376,  529,
      529,  386,  336,  354,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  368,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  258,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  250,  529,   67,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      292,  289,  290,  529,  529,  529,   41,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  478,  125,  529,  529,  529,  144,  142,
      141,  143,  529,  529,  529,  529,  465,  466,  464,  529,
      463,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  377,  529,  357,  529,  529,  529,  529,  529,  529,
      529,  361,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  389,  347,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  273,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,   68,  529,  529,  529,  529,  529,  529,

      529,  491,  529,  529,  180,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,   31,  529,
      529,  529,  529,  225,  221,  529,  224,  529,  529,  529,
       98,   86,  529,   87,  529,  529,  529,  529,  529,  460,
      461,  145,  529,  428,  529,  529,  529,  473,  470,  529,
      469,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  384,  362,  360,  365,
      359,  529,  529,  358,  529,  529,  529,  529,  529,  495,

      529,  529,  529,  497,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  388,  529,  529,  256,  255,  257,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  259,
      529,  529,  529,  274,  529,  270,  529,  271,  529,  529,
      529,  281,  529,  529,  529,  529,  529,  529,  452,  248,
      249,  524,   70,  529,  529,  529,  529,  529,  529,  490,
      529,  529,  179,  529,  529,  529,  529,  316,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      222,  529,  529,  529,  529,  529,  155,  159,  529,  529,
      529,  529,  529,  472,  471,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  246,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      364,  529,  498,  499,  529,  501,  529,  529,  529,  529,
      529,  529,  529,  529,  509,  529,  529,  529,  529,  512,
      529,  506,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  272,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  526,  529,

      523,  529,  529,  492,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      301,  529,  529,  529,  529,  529,  529,  294,  529,   29,
       44,  529,  529,  223,  529,   91,  529,  529,  529,  529,
      529,  427,  161,  467,  529,  529,  529,  433,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  363,  529,  500,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  514,  513,  529,  529,  529,  529,  529,  394,
      529,  529,  529,  262,  529,  529,  529,  529,  529,  253,

      252,  254,  529,  529,  529,  276,  529,  283,  529,  284,
      529,  529,  529,  455,  529,  529,  529,  450,  529,  527,
      529,   69,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  293,  529,  226,  529,  529,
       93,   97,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  496,  529,  529,  529,
      529,  529,  529,  529,  529,  515,  529,  529,  529,  529,

      529,  392,  529,  391,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  286,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  493,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  318,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  228,   90,
      529,  484,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  132,
      529,  529,  529,  529,  529,  135,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  503,

      396,  395,  529,  390,  266,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  522,  528,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      303,  529,  529,  529,  529,  529,  529,  295,  529,  529,
      429,  529,  529,  438,  529,  529,  529,  529,  529,  529,
      529,  529,  443,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  412,  133,  529,  529,
      529,  529,  127,  529,  529,  511,  529,  529,  504,  529,
      529,  529,  529,  508,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  278,  277,  529,  285,  449,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  302,  529,  529,  529,  529,  529,  529,  529,   92,
      529,  529,  529,  529,  529,  435,  529,  529,  529,  529,
      529,  529,  529,  529,  419,  410,  529,  409,  418,  407,
      529,  413,  417,  529,  529,  136,  529,  128,  529,  529,
      529,  529,  529,  516,  529,  529,  507,  529,  393,  263,
      529,  529,  529,  529,  265,  275,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  317,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  436,  529,  529,  529,  529,  529,  529,  414,  529,
      529,  408,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      315,  529,  529,  529,  324,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  437,  529,  529,  529,  442,  529,  529,
      529,  529,  415,  529,  529,  529,  494,  529,  529,  529,

      529,  529,  519,  505,  529,  260,  261,  529,  287,  529,
      451,  529,  454,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  325,  529,  327,  529,  529,  529,  529,
      529,  529,  529,  300,  529,  529,  529,  529,  529,  529,
      529,  445,  529,  441,  529,  529,  529,  411,  529,  131,
      129,  510,  529,  520,  529,  529,  529,  267,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  320,  326,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      420,  134,  529,  529,  517,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  328,  529,  529,  321,
      319,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  444,  529,  529,  518,  264,
      529,  529,  453,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  298,  307,  529,  529,
      529,  529,  529,  529,  434,  446,  416,  502,  529,  529,
      457,  529,  529,  529,  529,  299,  311,  529,  322,  529,
      529,  529,  529,  529,  529,  529,  529,  439,  529,  529,
      529,  529,  529,  529,  529,  323,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  288,  456,  529,  529,  529,

      529,  529,  529,  296,  529,  529,  529,  448,  529,  529,
      529,  529,  297,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  306,  529,  529,  529,  529,
      447,  529,  310,  529,  305,  308,  529,  529,  529,  309,
      312,  529,  314,  440,  313,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[87] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[4050] =
    {   0,
        0,    0, 4161, 4162, 4162, 4162, 4137,   82, 4136, 4151,
     4162, 4162, 4134,   77, 4162,   76,   74,   86,   88,   94,
     4162, 4162,   72, 4133,   74, 4162,   88,    0,   89,   91,
     4115, 4128, 4108, 4113,  114, 4125, 4104, 4122,  113,  102,
      108,  121, 4105, 4117, 4116, 4162, 4162, 4162, 4069,   59,
      101,   97,   63, 4068,   82, 4066, 4081,  113, 4070, 4069,
      109, 4065, 4061,  112,   84,  109, 4076, 4072, 4162, 4051,
     4162, 4162, 4162,  133, 4162, 4131, 4162, 4162, 4162, 4162,
     4162, 4162, 4162,  174, 4162, 4162, 4162,  178,  184,  199,
        0, 4162, 4162, 4162, 4162, 4162,    0, 4088, 4102, 4094,

     4096, 4084, 4090, 4101, 4092, 4086, 4079,  149, 4092, 4085,
     4076, 4073,  158, 4080,  138, 4078, 4073, 4079, 4080,  163,
     4071,  181, 4079, 4062, 4084, 4081,  187, 4064,  195, 4068,
     4064,  198, 4057, 4059, 4058, 4063, 4061, 4064, 4067, 4056,
      166, 4041,  117, 4021, 4034,    0, 4020, 4037, 4032, 4021,
     4017, 4014,    0, 4013, 4019, 4006, 4016,  153,  173,  170,
     4019, 4028, 4018, 4025,  178, 4005, 4010, 4009,  170, 4009,
     4000, 4017, 4010, 4162,  239, 4162,  243,  252, 4162,  213,
      259,    0, 4040, 4034, 4016, 4033, 4044, 4039, 4029, 4039,
     4021, 4039, 4018, 4007,    0, 4018, 4020, 4030, 4030, 4022,

     4012, 4015, 4019, 4017, 4023, 4024, 4007,  210, 4012, 4017,
     4021, 4009, 4002, 4008, 3988, 4009, 4002, 4011, 4014, 4002,
     4004, 3997, 3991, 3990, 4000, 3988, 4004, 4001, 3974, 3999,
     3972, 3993, 3986,  205, 3968, 3954, 3955, 3946, 3964, 3963,
     3958, 3953, 3947, 3959,    0, 3943, 3953, 3941,    0, 3952,
     3944, 3934, 3948, 3943, 3932, 3950, 3944, 3930, 3933, 3926,
     3930, 3923, 3942, 3942, 3922, 3920, 3930, 3933, 3934, 3916,
     3923,  266,  270,  279, 4162,  290,  294, 3943, 3944, 3944,
     3931, 3958, 3942, 3952, 3947, 3939, 3925, 3948, 3934, 3948,
     3921, 3937, 3919, 3918, 3917,    0, 3916, 3915, 3942, 3939,

     3934, 3937,  155,  238, 3910, 3915, 3908, 3907, 3928, 3916,
     3920, 3914, 3915, 3912, 3926, 3914, 3909, 3935, 3906, 3912,
     3904, 3916,    0, 3907, 3891, 3903, 3917, 3888, 3872, 3885,
     3882, 3877, 3874, 3864, 3862, 3859,    0, 3867, 3858, 3857,
     3876, 3868,    0, 3874, 3873, 3867, 3846, 3856, 3864, 3867,
     3864, 3861, 3845, 3859, 3843, 3844, 3841, 3840, 3844, 3853,
     3843, 3838, 3847, 3839, 3848,  298,  302, 3878, 3851, 3872,
     3865, 3871, 3877, 3872, 3845, 3860,  295, 3843, 3858,    0,
      253, 3852,  303,  300, 3852,  321, 3859, 3849, 3856, 3845,
     3852, 3860, 3855, 3844,  324, 3846, 3830,  339,  223, 3857,

     3844, 3844, 3852, 3837, 3850,    0, 3834, 3845,    0, 3833,
     3844, 3832, 3818, 3839,  342, 3842, 3834,  206, 3794, 3795,
     3804, 3806, 3791, 3794, 3803, 3795,    0,    0,    0, 3788,
     3800, 3801, 3790, 3788,    0, 3794, 3786, 3779, 3778, 3771,
        0, 3778, 3790, 3780, 3784, 3783, 3773, 3790, 3782,    0,
     3788, 3769,    0,    0,  364, 3813, 3802, 3784, 3783, 3809,
     3811, 3799, 3795, 3808, 3794, 3806, 3805, 3796, 3801, 3772,
     3787,  269, 3796, 3785,  297, 3794, 3783,  298, 3784, 3784,
     3780, 3789, 3785, 3772, 3790, 3768, 3771, 3783, 3764, 3781,
     3754, 3753, 3778, 3762, 3775, 3776, 3760, 3766, 3762, 3761,

     3757, 3759, 3753, 3751,  323,  256, 3759, 3755,  328,  335,
     3754,  360,  329, 3767, 3749, 3735, 3734, 3733, 3732, 3757,
        0, 3756,    0, 3729, 3728, 3753, 3748,    0, 3744, 3741,
     3749, 3738, 3732, 3746, 3733, 3744, 3733, 3742, 3715, 3707,
        0, 3709, 3703, 3699, 3692, 3689, 3703, 3689, 3691, 3700,
        0, 3704, 3684, 3702, 3701,    0, 3686, 3699,    0, 3683,
     3684,    0, 3691,    0,  326,    0,  368, 3705, 3707, 3712,
     3709, 3707, 3707,  369, 3695, 3718, 3713,    0,  390,  393,
     3686, 3713, 3684, 3696, 3700, 3700, 3686, 3690, 3696, 3700,
     3689, 3702, 3685, 3691, 3685, 3684, 3683, 3678, 3676, 3694,

     3688, 3687, 3673,  370, 3682, 3678, 3672, 3682, 3689, 3670,
     3683, 3672, 3662, 3671, 3659,  407,  413,    0, 3652, 3681,
     3676, 3671, 3667, 3662,  352, 3676, 3662, 3652, 3661, 3654,
     3660, 3666, 3658, 3654, 3656, 3647, 3662,  305,  377, 3645,
     3643, 3654, 3636,   65, 3645, 3642, 3656, 3655, 3653, 3650,
     3651,    0, 3650,  428, 3633, 3621, 3637, 3635,  385, 3624,
     3628, 3629, 3643, 3624, 3613, 3623, 3639, 3590, 3604,    0,
     3593,    0, 3585,    0,  365,    0,   73,  124,  384,  162,
      384,  255,  265,  297,  295,  313,  345,  330,  330,  359,
      381,  392,  417,  405,  412,  411,  407,  418,  409,  427,

      429,  434,  440,  434,  453,  447,  451,  454,  442,  446,
      458,  471,  461,  460,  458,  453,  465,  485,  449,  489,
      457,  473,  472,  473,  475,  454,  488,  495,  474,  498,
      503,  500,  486,  505,  508,  509,  506,  497,  498,  513,
      507,  505,  490,  502,    0,  504,  504,  520,  508,  506,
      508,  524,    0,  512,  526,  514,  532,  511,  520,  521,
      523,  533,  524,  535,  529,  537,  534,  523,    0,  530,
        0,  521,  538,  543,  535,  543,  536,  536,  533,  539,
      531,  544,  534,  553,  554,  551,  547,  543,  549,  555,
      564,  554,  553,  563,  553,  563,  566,  552,  542,  566,

      570,  564,  576,    0,  566,  578,  571,  568,  583,  570,
      575,  579,  583,  588,  565,  583,  574,  591,  572,  595,
      592,  598,    0,  599,  592,  582,  598,  604,  607,  589,
      581,  563,  570,  581,  566,  572,  577,  571,  578,  574,
      578,  582,  597,  594,  585,  600,    0,  602,  583,  595,
      601,  605,  637,  638,  625,  616,  617,  622,  635,  644,
      627,  632,  639,  629,  641,  640,    0,  649,  641,  649,
      654,  652,  656,  644,  659,  660,  657,  655,  663,  644,
      647,  655,  668,  655,  670,  672,  669,  668,  676,  658,
      672,  663,  680,  665,  667,  675,  674,  676,  682,  687,

      671,  690,  693,  692,  689,  698,  685,  679,  701,  692,
      696,  691,    0,    0,  694,  695,  696,  696,  699,  712,
      686,  703,  699,  714,  690,  717,  711,  706,  704,  721,
      722,  710,  717,  710,  728,    0,    0,  701,    0,  708,
      718,    0,  717,  731,  718,  723,  726,  726,  722,  722,
      733,  733,  725,  727,  747,  745,  736,  739,  738,    0,
      747,    0,  735,    0,    0,  724,  725,  739,  749,  757,
        0,  729,  743,  761,  743,  755,  745,  746,  747,  752,
      744,    0,  739,  766,  751,  742,  743,  774,  776,  771,
      778,  760,  766,  761,  765,  780,  766,  776,  771,    0,

      791,  773,  775,  782,  781,  789,  790,  788,  796,  797,
      791,  786,  804,  786,  800,  796,  789,  796,  796,  793,
      799,  813,  803,  802,  809,  814,  795,  816,  802,  808,
      775,    0,  794,  777,  791,  782,  789,  798,  796,  800,
        0,  782,  786,  779,  792,  787,  792,  791,  790,    0,
      793,  818,  841,  829,    0,    0,  843,  833,  839,  844,
      848,  835,  843,  839,  845,  844,  844,  838,  844,  855,
      829,  843,  857,  848,  850,  849,  848,  862,  865,  854,
      852,  866,  852,  868,  852,  857,  871,  862,  864,  863,
      862,  876,  879,  868,  866,  880,  877,  878,  868,  868,

      887,  882,  880,  881,  872,  881,  892,  883,  891,  898,
      899,  889,  887,  900,  881,  901,  885,  901,  877,  902,
      890,    0,  906,  906,  907,  900,  915,  897,  904,    0,
      906,  916,  896,  897,  922,  896,    0,    0,  915,    0,
        0,  910,  900,  924,  925,  915,  931,  924,    0,    0,
      939,  940,  925,  942,  943,    0,    0,  937,  937,  939,
      953,  948,  947,  951,  938,  928,  935,  955,  960,  946,
        0,  964,  950,  966,  962,  942,  960,  973,  946,  969,
      972,  962,  953,  972,  974,  971,  988,  990,  991,  972,
      983,  997,  998, 1000, 1011,  988,    0, 1007, 1014, 1014,

     1004, 1000,  990, 1017, 1017,  993, 1011, 1007, 1006, 1027,
     1025, 1025, 1011, 1019, 1032, 1028, 1031, 1011, 1036, 1026,
        0, 1034, 1031, 1032, 1035, 1025, 1024, 1038, 1032, 1032,
     1047, 1027, 1036, 1045, 1036, 1035, 1045, 1037, 1018, 1021,
        0, 1008, 1014, 1010, 1023,    0, 1013, 1032, 1026,    0,
        0, 1033, 1030, 1011,    0, 1017, 1050, 1062, 1063, 1065,
     1067, 1057, 1064, 1067, 1058, 1065, 1073, 1067,    0, 1057,
     1063,    0,    0, 1082,    0,    0, 1066, 1083,    0, 1075,
     1082,    0, 1069, 1078, 1085, 1085,    0, 1085,    0,    0,
     1075, 1092,    0, 1084, 1091,    0, 1078, 1087, 1094, 1081,

     1090, 1104, 1087, 1099, 1088, 1094, 1095, 1106, 1101, 1104,
     1109, 1106, 1104, 1101, 1113, 1099, 1106, 1110, 1108,    0,
     1103, 1104, 1113, 1118, 1096,    0, 1113,    0, 1110, 1110,
     1130, 1127, 1132, 1116,    0, 1119, 1105, 1125, 1123, 1128,
     1136, 1141, 1128, 1142, 1142, 1141, 1145, 1117,    0, 1147,
        0, 1141, 1143, 1147, 1153, 1132, 1154, 1139, 1142, 1141,
        0, 1147,    0, 1146, 1150, 1163, 1147, 1159, 1138, 1169,
     1156,    0, 1171,    0, 1168, 1175, 1169, 1177, 1161, 1179,
     1166, 1174, 1176, 1183, 1182, 1180, 1187, 1188, 1194, 1183,
     1183, 1201, 1202, 1191, 1187, 1195, 1194, 1196, 1181, 1208,

     1199, 1183, 1212, 1204, 1198, 1206, 1217, 1224, 1213, 1214,
     1217, 1220, 1219, 1235, 1217, 1237, 1230, 1238, 1235, 1225,
     1230, 1221, 1236, 1242, 1228, 1229, 1232, 1227, 1238, 1222,
     1223, 1244, 1252, 1226, 1257, 1241, 1245, 1255, 1242, 1254,
     1246, 1245, 1264, 1236, 1263, 1238, 1256, 1270, 1263, 1250,
     1261, 1267, 1259, 1274, 1264,    0,    0, 1249, 1260, 1271,
     1258, 1277, 1280, 1281, 1282, 1283, 1269, 1275,    0, 1255,
     1247, 1242, 1243, 1245, 1256, 1261, 1247, 1248, 1264,    0,
     1252,    0,    0, 1271, 1290, 1292, 1296,    0,    0, 1291,
     1302, 1303, 1302,    0, 1303,    0,    0, 1296, 1307, 1298,

        0,    0,    0,    0, 1302,    0,    0,    0, 1296,    0,
        0,    0,    0, 1304,    0,    0, 1312, 1314, 1305, 1289,
        0, 1312, 1299, 1305, 1310,    0, 1324, 1308, 1312, 1323,
     1324, 1314, 1310, 1301,    0,    0, 1313,    0, 1332, 1315,
     1324,    0,    0, 1328, 1318, 1327, 1316, 1320, 1338, 1341,
     1333, 1337, 1343, 1333, 1330, 1336, 1337, 1342, 1335, 1333,
     1331, 1338, 1356, 1341, 1348, 1356, 1347, 1339, 1363, 1351,
     1353, 1354, 1365, 1357, 1366, 1357,    0,    0, 1350, 1365,
     1344, 1364, 1376, 1347, 1348, 1360, 1374, 1376, 1378, 1383,
     1367, 1368, 1372, 1381, 1386, 1378, 1375, 1376, 1395, 1380,

     1385, 1391, 1398, 1388, 1401, 1393, 1405, 1392, 1407, 1405,
     1404, 1394, 1407, 1393, 1406, 1404, 1405, 1403, 1410, 1415,
     1420, 1422, 1420,    0,    0, 1413, 1411, 1417, 1426, 1424,
     1419, 1430, 1421, 1406, 1434,    0, 1415, 1428, 1432, 1428,
     1422, 1436, 1427, 1445, 1427, 1440, 1447, 1451, 1441, 1434,
     1431, 1455, 1439, 1444, 1454, 1448, 1442, 1457, 1432, 1433,
     1458, 1461, 1447, 1461, 1449, 1465, 1470, 1472, 1442, 1458,
     1459, 1459, 1466, 1463, 1467, 1462, 1469, 1482, 1472, 1482,
     1476, 1479, 1481, 1486, 1484, 1475, 1496, 1483, 1480, 1496,
        0,    0, 1487, 1498, 1491, 1495, 1506, 1477, 1491, 1509,

     1493, 1481, 1504, 1500, 1464, 1481, 1485,    0, 1482, 1473,
        0,    0, 1488, 1470, 1478, 1505, 1519, 1510, 1512, 1512,
     1525, 1525,    0,    0, 1510, 1517, 1516, 1529,    0, 1530,
        0, 1521, 1533, 1525, 1523, 1534,    0, 1521,    0,    0,
     1528,    0,    0, 1528, 1526, 1544, 1532, 1527,    0, 1544,
     1541, 1537, 1531,    0, 1541, 1540,    0, 1550,    0, 1543,
     1532, 1541, 1542, 1561, 1561, 1562, 1563, 1560, 1557, 1552,
     1552, 1556, 1554, 1572, 1559, 1565,    0, 1565, 1571,    0,
     1550, 1575, 1552, 1553,    0, 1567, 1572, 1567, 1581, 1570,
     1578, 1576, 1587, 1574, 1591, 1582, 1575, 1597, 1585, 1600,

     1592, 1595, 1606,    0, 1597, 1607, 1607, 1608, 1609, 1602,
     1605, 1595, 1611, 1614, 1606, 1612, 1608, 1620, 1604, 1620,
     1604, 1623, 1624,    0, 1621, 1627, 1630, 1631, 1632, 1603,
     1615, 1616, 1623, 1620, 1621, 1631, 1628, 1618, 1625, 1626,
     1636, 1642, 1640,    0,    0, 1636, 1624, 1643, 1628, 1648,
     1639, 1636, 1650, 1644,    0, 1648, 1639, 1652, 1648, 1656,
     1641, 1658, 1650, 1646, 1635, 1660, 1656, 1664, 1639, 1653,
     1665, 1669, 1662, 1670, 1656, 1659, 1677, 1661, 1679, 1663,
     1677, 1678, 1663, 1673, 1674, 1675, 1679, 1680, 1685, 1690,
     1684, 1688, 1687, 1664, 1688, 1666, 1697, 1686, 1679, 1685,

     1689, 1684, 1673, 1674, 1682, 1698, 1699, 1704, 1709,    0,
     1699,    0, 1697, 1697, 1683,    0, 1710, 1698, 1716, 1704,
     1705, 1717, 1690, 1704, 1718, 1725, 1721,    0,    0,    0,
     1683,    0, 1688, 1685,    0, 1695, 1715, 1723, 1718, 1733,
     1730, 1722,    0, 1723, 1725, 1715, 1742, 1743, 1744, 1745,
     1750, 1746, 1745, 1740, 1751, 1741, 1726, 1740, 1754, 1739,
     1746, 1746, 1762, 1755, 1751, 1752, 1754, 1749, 1764, 1764,
     1765, 1754, 1770, 1773, 1759, 1777, 1763, 1772, 1760, 1769,
        0, 1780, 1781, 1769, 1782, 1766, 1769, 1768, 1771, 1773,
     1773, 1788,    0, 1793, 1792, 1791, 1793, 1779,    0, 1768,

     1775, 1783, 1782, 1798, 1799, 1775, 1795, 1805, 1790, 1805,
     1796, 1798, 1794, 1814, 1802, 1797, 1809, 1814, 1819, 1816,
     1819, 1816,    0, 1805, 1814, 1818, 1816, 1810,    0, 1810,
     1825, 1826,    0, 1807, 1819, 1829, 1832, 1827,    0, 1832,
        0, 1823, 1819, 1828, 1820, 1824, 1829, 1838, 1815, 1832,
     1828, 1831, 1833, 1846, 1850, 1827, 1858, 1847, 1842, 1843,
     1856, 1864, 1850, 1859,    0, 1859, 1864, 1865, 1865, 1871,
     1859, 1861,    0, 1859, 1858, 1858,    0, 1875, 1860, 1879,
     1862, 1868, 1866, 1884, 1866, 1882, 1857,    0, 1858, 1859,
     1890, 1885, 1888,    0, 1893, 1877, 1876, 1879,    0, 1887,

     1885, 1882, 1878, 1884, 1890, 1904, 1890, 1890, 1904, 1909,
     1906, 1900, 1908, 1900, 1899,    0,    0, 1915, 1893,    0,
     1901, 1902, 1921, 1914, 1904, 1921, 1925, 1921, 1914, 1928,
     1912, 1924, 1929, 1932, 1919, 1926, 1921, 1922, 1934, 1907,
     1926, 1935, 1944, 1945, 1932, 1936, 1948, 1899, 1920, 1914,
     1903, 1941, 1936,    0,    0,    0,    0, 1942, 1953, 1957,
     1943, 1944, 1944,    0, 1957, 1962, 1960, 1949, 1937, 1939,
     1953, 1953, 1953,    0, 1949, 1962, 1972, 1953, 1978, 1960,
     1960, 1967,    0, 1963, 1964, 1977,    0,    0, 1972, 1986,
     1968, 1969, 1989, 1982, 1974, 1992, 1993, 1975, 1976,    0,

     1979, 1990, 1980, 1992, 1996,    0, 1982, 1989, 1989,    0,
     2000, 1989, 2003,    0, 1993, 2001, 1996, 1999, 1999, 1993,
     2013, 2000, 2015, 1998, 1988, 2008, 1991, 2018, 2021, 2018,
     2008, 2009, 2029, 2015, 2001, 2022, 2027,    0, 2016, 2016,
     2032, 2033,    0, 2027, 2020,    0, 2034,    0, 2027, 2028,
        0, 2021,    0, 2040, 2034, 2042, 2041, 2037, 2038, 2042,
     2047, 2041, 2033, 2035, 2041, 2048, 2027, 2041, 2055, 2041,
     2054, 2032, 2056, 2052, 2047, 2062, 2060, 2049, 2063, 2066,
        0, 2051,    0, 2047, 2073, 2061, 2072,    0, 2060, 2076,
        0, 2077, 2074, 2072, 2070, 2083,    0, 2064, 2072, 2082,

     2059, 2071, 2079, 2091, 2079, 2080, 2094, 2088, 2087, 2088,
     2072, 2099, 2090, 2103, 2106, 2103, 2089, 2106, 2097, 2100,
     2092, 2113, 2097, 2112, 2113, 2087, 2115, 2116, 2106, 2102,
        0,    0,    0, 2110, 2104, 2121, 2114,    0,    0, 2109,
     2127, 2124, 2125, 2122, 2118, 2102, 2103, 2110, 2123, 2115,
     2125, 2118, 2109, 2135, 2137, 2134, 2140, 2142, 2129, 2136,
     2148, 2132, 2137, 2147, 2142,    0, 2119, 2120, 2107,    0,
     2139, 2146, 2142, 2156, 2157, 2154,    0,    0, 2145,    0,
     2154, 2147, 2162, 2156, 2166, 2146, 2152,    0,    0, 2168,
     2160,    0, 2150,    0, 2174, 2165, 2164,    0, 2160, 2174,

     2162,    0, 2174, 2166, 2171, 2181, 2169, 2170,    0,    0,
     2184,    0, 2182,    0, 2177, 2174,    0, 2172, 2172, 2174,
     2191, 2176, 2193, 2194, 2195, 2185, 2201, 2185, 2199, 2187,
     2205, 2184, 2185, 2197, 2192, 2210, 2200, 2208, 2211, 2208,
     2212, 2203,    0, 2200, 2189, 2218, 2192, 2219,    0,    0,
     2207, 2206,    0, 2218,    0,    0, 2214, 2210,    0, 2210,
        0, 2219, 2227, 2232, 2227, 2215, 2235, 2235, 2223, 2224,
     2227, 2229, 2227, 2229, 2213, 2226, 2226, 2244, 2232, 2243,
     2222, 2223, 2255, 2245, 2227,    0, 2228, 2229, 2248,    0,
     2242, 2263, 2260,    0,    0, 2235, 2245, 2252, 2259, 2271,

     2242, 2243, 2270, 2275, 2246, 2278, 2275, 2267, 2281, 2282,
     2268, 2278,    0, 2255, 2280, 2257, 2278,    0, 2267, 2280,
     2290, 2289, 2277, 2294, 2283, 2273, 2294, 2298, 2283, 2287,
     2296, 2299, 2274,    0, 2288, 2276, 2307, 2278,    0,    0,
     2305, 2308, 2288, 2310, 2309, 2295, 2312, 2314,    0, 2312,
     2315, 2312, 2303, 2320, 2317, 2319, 2316, 2325, 2313, 2317,
     2328, 2319, 2324, 2317,    0, 2333, 2335, 2309, 2296, 2291,
     2292, 2304,    0, 2314, 2315, 2333, 2342, 2342, 2319, 2346,
     2347, 2334, 2353, 2347, 2338,    0, 2356,    0, 2327,    0,
     2351,    0, 2346,    0, 2341, 2357, 2348, 2344, 2358,    0,

     2355, 2363,    0,    0,    0, 2360, 2356,    0, 2370, 2352,
     2357, 2356, 2357, 2373,    0, 2365, 2373, 2360, 2365, 2368,
     2368, 2352, 2353, 2376, 2383, 2386, 2387, 2388, 2381,    0,
        0, 2360, 2380, 2388, 2391, 2380, 2393, 2379,    0, 2393,
     2387,    0,    0,    0, 2395, 2382, 2383, 2395, 2403, 2386,
     2404, 2393, 2404, 2408, 2395, 2399, 2409, 2398, 2402, 2395,
     2413, 2386, 2400, 2410, 2408, 2412, 2418, 2410, 2421, 2411,
     2408, 2412, 2405, 2420, 2415, 2423, 2430,    0, 2422, 2417,
     2419, 2425, 2434, 2432, 2426, 2430, 2425, 2442,    0, 2436,
     2436, 2449, 2441, 2435, 2448, 2452, 2440, 2455, 2455, 2450,

     2450, 2452, 2464, 2461, 2436, 2439, 2459, 2441, 2464, 2459,
     2471,    0, 2458,    0, 2463, 2456, 2475, 2463, 2466, 2463,
     2479, 2465, 2480, 2473, 2483, 2486, 2470, 2487, 2487, 2488,
     2476, 2480, 2490, 2488, 2489, 2481, 2482, 2481, 2497, 2498,
     2492, 2496, 2499, 2502, 2502, 2500, 2490, 2480, 2500, 2498,
        0,    0,    0, 2513, 2480, 2484,    0, 2471, 2506, 2527,
     2501, 2502, 2515, 2524, 2522, 2507, 2520, 2522, 2527, 2513,
     2517, 2515, 2521,    0,    0, 2527, 2533, 2524,    0,    0,
        0,    0, 2536, 2520, 2523, 2541,    0,    0,    0, 2523,
        0, 2543, 2542, 2525, 2542, 2543, 2548, 2531, 2550, 2553,

     2543, 2544, 2545, 2549, 2553, 2531, 2533, 2551, 2556, 2570,
     2541,    0, 2568,    0, 2566, 2556, 2556, 2565, 2558, 2574,
     2575,    0, 2574, 2567, 2582, 2583, 2570, 2567, 2556, 2576,
     2573, 2578, 2584, 2561, 2573, 2574, 2594, 2581, 2583, 2573,
     2584, 2586, 2587, 2583, 2594, 2590, 2596, 2581, 2606, 2596,
     2593, 2595, 2591,    0,    0, 2611, 2582, 2613, 2597, 2611,
     2599, 2613, 2604, 2617, 2605, 2610, 2622, 2615, 2610, 2615,
     2618,    0, 2608, 2620, 2625, 2626, 2627, 2632, 2629, 2621,
     2618, 2613, 2613, 2635, 2634, 2636, 2623, 2640, 2620, 2633,
     2626, 2629, 2629,    0, 2631, 2649, 2646, 2648, 2650, 2654,

     2636,    0, 2642, 2643,    0, 2655, 2654, 2652, 2642, 2657,
     2640, 2652, 2665, 2636, 2637, 2657, 2664, 2646, 2669, 2665,
     2655, 2663, 2673, 2662, 2672, 2678, 2665, 2661,    0, 2633,
     2638, 2679, 2676,    0,    0, 2681,    0, 2667, 2674, 2688,
        0,    0, 2675,    0, 2680, 2687, 2677, 2674, 2690,    0,
        0,    0, 2665,    0, 2692, 2689, 2694,    0,    0, 2684,
        0, 2683, 2690, 2685, 2703, 2693, 2688, 2706, 2705, 2704,
     2695, 2691, 2707, 2682, 2710, 2711, 2711, 2702, 2709, 2714,
     2717, 2706, 2708, 2703, 2711, 2724,    0,    0,    0,    0,
        0, 2717, 2709,    0, 2723, 2713, 2705, 2719, 2719, 2702,

     2713, 2726, 2727,    0, 2729, 2726, 2734, 2732, 2717, 2728,
     2723, 2729, 2724, 2741, 2742, 2728, 2725, 2728, 2733, 2740,
     2734, 2753, 2747, 2738,    0, 2738, 2745,    0,    0,    0,
     2756, 2748, 2749, 2761, 2755, 2749, 2753, 2752, 2748,    0,
     2754, 2738, 2749,    0, 2767,    0, 2753,    0, 2766, 2759,
     2759,    0, 2775, 2765, 2773, 2748, 2759, 2761,    0,    0,
        0,    0,    0, 2767, 2765, 2781, 2779, 2779, 2779,    0,
     2774, 2772,    0, 2779, 2789, 2778, 2785,    0, 2790, 2765,
     2790, 2785, 2784, 2788, 2770, 2793, 2784, 2802, 2801, 2787,
     2790, 2791, 2798, 2800, 2795, 2765, 2767, 2812, 2812, 2802,

        0, 2814, 2815, 2811, 2819, 2806,    0,    0, 2822, 2814,
     2809, 2817, 2826,    0,    0, 2819, 2827, 2820, 2809, 2820,
     2822, 2819, 2820, 2818, 2809, 2822, 2830, 2812, 2813,    0,
     2836, 2832, 2829, 2847, 2826, 2830, 2833, 2847, 2839, 2851,
        0, 2824,    0,    0, 2851,    0, 2844, 2840, 2856, 2836,
     2841, 2857, 2852, 2834,    0, 2846, 2862, 2854, 2853,    0,
     2852, 2840, 2867, 2868, 2856, 2866, 2865, 2863, 2873, 2858,
     2869, 2880, 2851, 2868, 2869, 2873, 2885, 2869, 2883, 2884,
     2859,    0, 2888, 2873, 2862, 2883, 2883, 2880, 2885, 2885,
     2881, 2875, 2883, 2899, 2889, 2873, 2887, 2905,    0, 2902,

        0, 2896, 2891,    0, 2905, 2891, 2894, 2910, 2895, 2912,
     2905, 2913, 2903, 2919, 2906, 2907, 2908, 2919, 2904, 2921,
        0, 2926, 2925, 2920, 2899, 2930, 2927,    0, 2915,    0,
        0, 2914, 2927,    0, 2924,    0, 2933, 2934, 2931, 2931,
     2936,    0,    0,    0, 2911, 2942, 2943,    0, 2924, 2942,
     2938, 2930, 2935, 2934, 2932, 2943, 2937, 2953, 2941, 2945,
     2945, 2946, 2946, 2943, 2947, 2945, 2955,    0, 2961,    0,
     2958, 2948, 2958, 2960, 2970, 2945, 2963, 2969, 2963, 2962,
     2963, 2977,    0,    0, 2978, 2972, 2967, 2971, 2973,    0,
     2983, 2971, 2971,    0, 2972, 2979, 2990, 2976, 2990,    0,

        0,    0, 2995, 2984, 2983,    0, 2986,    0, 2995,    0,
     2986, 3001, 2998,    0, 2986, 2990, 2998,    0, 2991,    0,
     2995,    0, 3004, 3006, 3008, 3003, 2982, 3005, 3012, 3011,
     3002, 3000, 2988, 3000, 3001, 3010, 3012, 3021, 3009, 3012,
     3015, 3008, 3014, 3026, 3018,    0, 3031,    0, 3013, 3029,
        0,    0, 3020, 3035, 3036, 3023, 3019, 3033, 3026, 3030,
     3028, 3044, 3043, 3027, 3018, 3031, 3050, 3045, 3048, 3039,
     3055, 3048, 3050, 3044, 3040, 3042, 3054, 3059, 3060, 3054,
     3058, 3070, 3059, 3059, 3060, 3075,    0, 3046, 3066, 3063,
     3073, 3062, 3073, 3068, 3083,    0, 3071, 3067, 3067, 3070,

     3085,    0, 3085,    0, 3080, 3091, 3084, 3063, 3064, 3078,
     3096, 3077, 3098, 3069, 3097, 3095, 3100, 3103, 3093, 3081,
     3087, 3090, 3106,    0, 3091, 3097, 3109, 3109, 3114, 3113,
     3115, 3100, 3104, 3115, 3106, 3110, 3092, 3104,    0, 3122,
     3121, 3118, 3114, 3125, 3125, 3123, 3128, 3132,    0,    0,
     3124,    0, 3123, 3136, 3134, 3135, 3110, 3141, 3123, 3138,
     3114, 3127, 3140, 3128, 3130, 3145, 3131, 3134, 3139, 3134,
     3155, 3131, 3143, 3135, 3147, 3145, 3150, 3151, 3145,    0,
     3146, 3148, 3149, 3156, 3150,    0, 3169, 3170, 3163, 3159,
     3165, 3156, 3167, 3157, 3158, 3155, 3168, 3178, 3181,    0,

        0,    0, 3178,    0,    0, 3165, 3165, 3173, 3174, 3157,
     3170, 3176, 3167, 3178, 3190, 3189, 3190, 3176, 3191, 3186,
     3180, 3181,    0,    0, 3192, 3188, 3198, 3195, 3191, 3194,
     3193, 3208, 3209, 3197, 3194, 3195, 3183, 3213, 3207, 3192,
        0, 3203, 3188, 3217, 3203, 3216, 3210,    0, 3204, 3221,
        0, 3216, 3196,    0, 3214, 3210, 3211, 3216, 3219, 3227,
     3218, 3228,    0, 3219, 3225, 3225, 3238, 3226, 3224, 3219,
     3240, 3230, 3227, 3243, 3244, 3235,    0,    0, 3232, 3251,
     3234, 3235,    0, 3235, 3254,    0, 3253, 3244,    0, 3235,
     3252, 3230, 3257,    0, 3243, 3262, 3247, 3255, 3242, 3267,

     3268, 3257, 3260, 3252,    0,    0, 3258,    0,    0, 3243,
     3260, 3267, 3268, 3270, 3264, 3249, 3278, 3264, 3270, 3281,
     3280, 3265, 3275, 3279, 3277, 3259, 3260, 3277, 3292, 3274,
     3280,    0, 3282, 3277, 3297, 3294, 3281, 3296, 3293,    0,
     3298, 3297, 3303, 3303, 3296,    0, 3290, 3295, 3295, 3296,
     3294, 3283, 3295, 3285,    0, 3286, 3313,    0,    0,    0,
     3298,    0,    0, 3319, 3312,    0, 3314,    0, 3314, 3312,
     3324, 3306, 3322,    0, 3325, 3317,    0, 3318,    0,    0,
     3300, 3313, 3314, 3333,    0,    0, 3321, 3316, 3319, 3319,
     3336, 3325, 3327, 3322, 3342, 3340, 3341, 3322,    0, 3332,

     3318, 3336, 3326, 3337, 3332, 3340, 3341, 3351, 3343, 3327,
     3350, 3335, 3358, 3357, 3344, 3349, 3362, 3348, 3365, 3358,
     3351,    0, 3357, 3359, 3370, 3352, 3354, 3363,    0, 3375,
     3358,    0, 3360, 3375, 3365, 3372, 3367, 3378, 3366, 3380,
     3374, 3372, 3379, 3370, 3385, 3378, 3381, 3382, 3375, 3390,
     3391, 3384, 3389, 3380, 3398, 3370, 3393, 3378, 3401, 3386,
        0, 3394, 3399, 3377,    0, 3395, 3394, 3399, 3401, 3408,
     3383, 3410, 3403, 3386, 3398, 3399, 3417, 3407, 3402, 3408,
     3414, 3420, 3417,    0, 3402, 3418, 3413,    0, 3422, 3420,
     3428, 3429,    0, 3421, 3420, 3423,    0, 3434, 3421, 3421,

     3420, 3416,    0,    0, 3442,    0,    0, 3433, 3414, 3434,
        0, 3432,    0, 3438, 3444, 3437, 3420, 3432, 3450, 3449,
     3450, 3441, 3445,    0, 3433,    0, 3441, 3439, 3455, 3453,
     3458, 3445, 3457,    0, 3466, 3437, 3438, 3449, 3466, 3469,
     3457,    0, 3469,    0, 3456, 3467, 3457,    0, 3459,    0,
        0,    0, 3478,    0, 3466, 3476, 3463,    0, 3478, 3479,
     3471, 3481, 3481, 3479, 3484, 3470, 3482, 3491, 3489, 3485,
     3481, 3471,    0,    0, 3481, 3492, 3486, 3481, 3492, 3487,
     3491, 3499, 3500, 3490, 3504, 3488, 3489, 3507, 3491, 3505,
        0,    0, 3510, 3494,    0, 3504, 3503, 3501, 3499, 3517,

     3515, 3509, 3504, 3515, 3510, 3514,    0, 3520, 3516,    0,
        0, 3520, 3525, 3528, 3519, 3519, 3529, 3529, 3527, 3523,
     3507, 3519, 3509, 3522, 3522,    0, 3529, 3524,    0,    0,
     3529, 3531,    0, 3527, 3539, 3544, 3547, 3538, 3538, 3548,
     3546, 3530, 3553, 3538, 3557, 3554,    0,    0, 3554, 3548,
     3542, 3548, 3545, 3560,    0,    0,    0,    0, 3546, 3549,
        0, 3565, 3550, 3569, 3566,    0,    0, 3552,    0, 3564,
     3571, 3563, 3557, 3568, 3573, 3561, 3578,    0, 3567, 3557,
     3563, 3575, 3582, 3574, 3568,    0, 3583, 3588, 3585, 3588,
     3589, 3574, 3569, 3585, 3576,    0,    0, 3592, 3597, 3594,

     3597, 3587, 3590,    0, 3602, 3595, 3602,    0, 3601, 3589,
     3594, 3597,    0, 3609, 3608, 3607, 3601, 3609, 3614, 3613,
     3592, 3615, 3614, 3608, 3596,    0, 3617, 3609, 3612, 3605,
        0, 3601,    0, 3622,    0,    0, 3625, 3624, 3611,    0,
        0, 3606,    0,    0,    0, 4162, 3656, 3658, 3660
    } ;

static yyconst flex_int16_t yy_def[4050] =
    {   0,
     4046,    1, 4046, 4046, 4046, 4046, 4046, 4047, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4046, 4046, 4046, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4046, 4046,
     4046, 4046, 4046, 4047, 4046, 4047, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4049, 4046, 4046, 4046, 4046, 4046, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4047, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4049, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4046, 4046, 4046, 4046, 4046, 4046, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4046, 4046, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048,    0, 4046, 4046, 4046
    } ;

static yyconst flex_int16_t yy_nxt[4249] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   28,   33,   34,   28,   28,   35,   36,   37,   38,
       39,   28,   40,   41,   42,   43,   44,   28,   28,   28,
       45,   46,    4,   47,   48,   28,   49,   28,   50,   51,
       52,   53,   28,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   28,   67,   68,   28,
       28,   28,   69,   70,   71,   72,   75,   80,   82,   84,
       84,   84,   84,   92,   93,   85,   95,   96,   83,   81,

       86,   88,  795,   89,   89,   89,   89,   88,   87,   89,
       89,   89,   89,  796,  103,   98,  107,   90,  113,   99,
      108,  104,  142,   90,  100,  105,  101,  126,  106,  143,
      150,  127,  102,  151,   76,  129,   91,   75,  120,  114,
      837,  128,  121,  153,  168,  130,  122,  115,   90,  131,
      133,  154,  132,  116,   90,  123,  124,  144,  125,  169,
      134,  145,   75,  135,  147,  148,  161,   91,  136,  157,
      137,  146,  165,  170,  149,  193,  200,  158,  162,  171,
      194,  201,  166,  392,  237,   76,  238,  393,  167,   84,
       84,   84,   84,  177,  177,  177,  177,   88,  838,   89,

       89,   89,   89,  175,  176,  206,  207,  178,  179,  180,
       76,  180,  208,   90,  181,  181,  181,  181,  216,  210,
      220,  234,  251,  224,  217,  255,  266,  252,  181,  181,
      181,  181,  841,  218,  175,  176,  211,  221,  178,  179,
      225,  235,  253,  267,   90,  256,  261,  302,  537,  272,
      254,  272,  538,  262,  273,  273,  273,  273,  177,  177,
      177,  177,  276,  514,  276,  303,  515,  277,  277,  277,
      277,  394,  274,  275,  181,  181,  181,  181,  329,  471,
      330,  273,  273,  273,  273,  273,  273,  273,  273,  366,
      472,  366,  632,  395,  367,  367,  367,  367,  593,  473,

      176,  633,  594,  274,  275,  277,  277,  277,  277,  277,
      277,  277,  277,  367,  367,  367,  367,  367,  367,  367,
      367,  463,  597,  602,  179,  480,  598,  603,  844,  845,
      787,  176,  275,  464,  465,  466,  599,  467,  468,  475,
      476,  477,  481,  482,  483,  478,  479,  485,  630,  498,
      486,  499,  487,  636,  788,  179,  846,  637,  644,  488,
      489,  500,  631,  275,  847,  504,  505,  638,  501,  506,
      507,  508,  529,  848,  639,  530,  509,  531,  645,  510,
      773,  511,  512,  513,  532,  533,  688,  641,  534,  567,
      568,  569,  642,  643,  570,  741,  700,  571,  774,  851,

      689,  572,  701,  573,  690,  852,  853,  574,  575,  742,
      789,  576,  691,  692,  849,  693,  705,  706,  713,  714,
      790,  715,  707,  716,  850,  854,  708,  709,  710,  821,
      711,  822,  712,  717,  754,  755,  855,  835,  756,  836,
      763,  764,  856,  765,  839,  757,  758,  759,  857,  760,
      766,  858,  761,  762,  805,  806,  807,  842,  840,  843,
      859,  808,  860,  861,  862,  809,  810,  811,  812,  863,
      813,  814,  815,  864,  865,  816,  866,  867,  868,  870,
      871,  880,  869,  873,  874,  881,  875,  882,  890,  891,
      876,  892,  893,  905,  877,  913,  872,  878,  894,  879,

      883,  884,  914,  885,  895,  915,  916,  886,  917,  918,
      896,  887,  897,  919,  888,  906,  889,  907,  898,  908,
      920,  899,  900,  921,  901,  909,  910,  902,  903,  904,
      922,  911,  923,  924,  912,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  986,  987,  988,  989,  990,

      991,  992,  993,  995,  996,  994,  997,  985,  998,  999,
     1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1013, 1009,
     1014, 1015, 1003, 1016, 1017, 1018, 1019, 1020, 1010, 1021,
     1022, 1011, 1029, 1030, 1023, 1012, 1024, 1031, 1032, 1033,
     1025, 1034, 1035, 1036, 1037, 1038, 1026, 1039, 1027, 1040,
     1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
     1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070,
     1071, 1072, 1069, 1074, 1075, 1077, 1079, 1080, 1081, 1083,
     1084, 1085, 1076, 1086, 1088, 1089, 1078, 1091, 1093, 1082,

     1094, 1095, 1097, 1090, 1098, 1073, 1099, 1100, 1092, 1101,
     1102, 1103, 1096, 1104, 1105, 1106, 1107, 1087, 1108, 1109,
     1110, 1112, 1113, 1114, 1115, 1111, 1116, 1117, 1119, 1120,
     1118, 1122, 1123, 1124, 1125, 1121, 1126, 1129, 1127, 1128,
     1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150,
     1151, 1152, 1153, 1154, 1155, 1156, 1157, 1146, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,

     1190, 1196, 1197, 1198, 1199, 1200, 1201, 1191, 1202, 1203,
     1204, 1192, 1205, 1193, 1194, 1206, 1207, 1209, 1195, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231,
     1208, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1230, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,

     1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1316, 1328, 1329,
     1330, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339, 1340,
     1334, 1347, 1348, 1341, 1349, 1350, 1351, 1352, 1342, 1353,
     1343, 1344, 1354, 1359, 1360, 1345, 1346, 1361, 1355, 1356,
     1362, 1363, 1364, 1357, 1358, 1365, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1385,
     1386, 1379, 1387, 1388, 1389, 1392, 1380, 1393, 1381, 1394,

     1395, 1396, 1397, 1382, 1383, 1398, 1399, 1384, 1400, 1390,
     1391, 1401, 1402, 1403, 1404, 1405, 1410, 1420, 1418, 1411,
     1412, 1421, 1422, 1413, 1423, 1426, 1429, 1414, 1406, 1419,
     1407, 1408, 1409, 1415, 1416, 1424, 1427, 1417, 1430, 1431,
     1428, 1432, 1433, 1425, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1482, 1483, 1484, 1485, 1472, 1486, 1487, 1488, 1489,

     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1500, 1517, 1518, 1519,
     1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
     1550, 1551, 1553, 1552, 1554, 1555, 1556, 1557, 1558, 1559,
     1561, 1562, 1563, 1564, 1565, 1566, 1567, 1571, 1568, 1572,
     1575, 1560, 1569, 1573, 1574, 1576, 1570, 1577, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1591, 1587, 1588,

     1592, 1595, 1597, 1599, 1600, 1601, 1602, 1603, 1596, 1606,
     1598, 1593, 1607, 1589, 1609, 1590, 1610, 1594, 1604, 1605,
     1611, 1612, 1608, 1613, 1614, 1615, 1616, 1617, 1624, 1618,
     1625, 1626, 1619, 1627, 1620, 1628, 1629, 1634, 1635, 1621,
     1630, 1636, 1622, 1637, 1631, 1632, 1633, 1638, 1639, 1623,
     1640, 1641, 1643, 1645, 1646, 1647, 1648, 1650, 1644, 1649,
     1651, 1652, 1653, 1654, 1642, 1655, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
     1670, 1671, 1672, 1673, 1674, 1675, 1677, 1678, 1679, 1680,
     1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1676, 1689,

     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
     1750, 1752, 1753, 1754, 1755, 1756, 1751, 1757, 1758, 1759,
     1760, 1761, 1762, 1763, 1764, 1765, 1767, 1768, 1769, 1770,
     1771, 1766, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1780,
     1781, 1779, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,

     1790, 1791, 1795, 1796, 1797, 1800, 1798, 1801, 1802, 1804,
     1805, 1806, 1792, 1799, 1807, 1808, 1809, 1810, 1793, 1811,
     1812, 1794, 1813, 1814, 1815, 1803, 1816, 1817, 1819, 1820,
     1821, 1822, 1823, 1818, 1824, 1825, 1826, 1827, 1828, 1829,
     1830, 1831, 1833, 1835, 1836, 1838, 1843, 1839, 1834, 1844,
     1832, 1840, 1841, 1842, 1837, 1845, 1846, 1848, 1849, 1850,
     1851, 1852, 1853, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
     1847, 1862, 1863, 1864, 1854, 1865, 1866, 1867, 1868, 1869,
     1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
     1880, 1881, 1882, 1883, 1884, 1885, 1886, 1893, 1887, 1891,

     1888, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
     1903, 1904, 1889, 1890, 1892, 1905, 1906, 1907, 1908, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1917, 1919, 1920, 1918,
     1909, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
     1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
     1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
     1950, 1951, 1954, 1955, 1952, 1956, 1957, 1958, 1959, 1953,
     1960, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
     1976, 1977, 1961, 1962, 1963, 1978, 1979, 1964, 1965, 1980,
     1981, 1982, 1983, 1984, 1966, 1985, 1986, 1987, 1988, 1989,

     1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
     2000, 2001, 2002, 2006, 2007, 2008, 2009, 2010, 2011, 2014,
     2003, 2012, 2015, 2016, 2004, 2005, 2017, 2013, 2018, 2019,
     2020, 2021, 2023, 2024, 2025, 2027, 2028, 2029, 2026, 2022,
     2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
     2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
     2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
     2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
     2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
     2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,

     2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
     2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
     2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
     2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2131, 2132, 2133, 2134, 2139, 2140, 2141, 2147, 2135,
     2142, 2143, 2144, 2136, 2137, 2138, 2148, 2149, 2150, 2151,
     2152, 2153, 2154, 2145, 2155, 2156, 2157, 2158, 2146, 2159,
     2160, 2161, 2162, 2163, 2164, 2165, 2167, 2168, 2169, 2170,
     2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2180, 2166,
     2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2179, 2189,

     2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
     2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
     2210, 2211, 2212, 2213, 2214, 2215, 2216, 2218, 2219, 2217,
     2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2220, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
     2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249,
     2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259,
     2266, 2267, 2268, 2269, 2260, 2261, 2270, 2271, 2262, 2272,
     2263, 2264, 2273, 2274, 2275, 2265, 2276, 2277, 2278, 2279,
     2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289,

     2290, 2291, 2292, 2293, 2294, 2297, 2295, 2298, 2299, 2300,
     2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310,
     2311, 2312, 2296, 2313, 2314, 2315, 2316, 2317, 2318, 2319,
     2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329,
     2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339,
     2340, 2341, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351,
     2352, 2353, 2357, 2354, 2358, 2342, 2355, 2343, 2359, 2360,
     2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2356, 2370,
     2371, 2372, 2373, 2361, 2374, 2377, 2378, 2379, 2380, 2381,
     2382, 2383, 2384, 2375, 2385, 2386, 2387, 2388, 2389, 2376,

     2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399,
     2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409,
     2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419,
     2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2433,
     2434, 2429, 2435, 2436, 2430, 2437, 2438, 2439, 2440, 2441,
     2442, 2431, 2432, 2443, 2444, 2445, 2446, 2447, 2448, 2449,
     2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459,
     2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469,
     2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2481,
     2482, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492,

     2493, 2479, 2483, 2480, 2494, 2495, 2496, 2497, 2498, 2499,
     2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2512, 2509,
     2508, 2510, 2511, 2513, 2514, 2515, 2516, 2517, 2518, 2519,
     2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
     2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549,
     2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2561,
     2559, 2562, 2563, 2564, 2565, 2566, 2567, 2560, 2568, 2569,
     2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
     2581, 2582, 2583, 2570, 2585, 2586, 2587, 2588, 2589, 2590,

     2584, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,
     2620, 2621, 2622, 2623, 2624, 2625, 2626, 2628, 2629, 2630,
     2631, 2632, 2633, 2634, 2635, 2636, 2627, 2637, 2638, 2639,
     2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649,
     2650, 2651, 2652, 2653, 2654, 2655, 2659, 2660, 2661, 2656,
     2662, 2663, 2657, 2664, 2665, 2666, 2667, 2668, 2669, 2658,
     2670, 2674, 2675, 2676, 2677, 2678, 2671, 2679, 2680, 2681,
     2682, 2683, 2684, 2672, 2673, 2685, 2686, 2687, 2688, 2689,

     2690, 2693, 2691, 2694, 2695, 2696, 2697, 2698, 2699, 2700,
     2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2692, 2709,
     2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719,
     2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
     2730, 2736, 2731, 2733, 2737, 2738, 2739, 2742, 2740, 2732,
     2741, 2734, 2743, 2744, 2745, 2746, 2747, 2748, 2735, 2749,
     2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759,
     2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2770,
     2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780,
     2781, 2782, 2769, 2783, 2784, 2785, 2786, 2787, 2788, 2789,

     2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819,
     2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829,
     2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2840,
     2841, 2842, 2843, 2844, 2839, 2845, 2846, 2848, 2853, 2854,
     2847, 2855, 2856, 2857, 2858, 2859, 2860, 2849, 2861, 2863,
     2850, 2862, 2865, 2851, 2852, 2866, 2867, 2868, 2870, 2871,
     2872, 2869, 2873, 2874, 2876, 2864, 2877, 2878, 2879, 2880,
     2883, 2884, 2881, 2882, 2885, 2886, 2887, 2888, 2889, 2875,

     2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899,
     2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,
     2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
     2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929,
     2930, 2931, 2932, 2934, 2935, 2936, 2937, 2938, 2933, 2939,
     2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950,
     2940, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959,
     2960, 2961, 2962, 2963, 2971, 2964, 2965, 2972, 2966, 2967,
     2973, 2974, 2975, 2976, 2968, 2977, 2981, 2978, 2982, 2979,
     2983, 2969, 2970, 2980, 2984, 2985, 2986, 2987, 2988, 2989,

     2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999,
     3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
     3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
     3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029,
     3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
     3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
     3050, 3051, 3052, 3053, 3054, 3056, 3057, 3058, 3059, 3060,
     3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3055, 3069,
     3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079,
     3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089,

     3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099,
     3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109,
     3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119,
     3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129,
     3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139,
     3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149,
     3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159,
     3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169,
     3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179,
     3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189,

     3190, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3191, 3199,
     3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209,
     3210, 3211, 3215, 3217, 3218, 3219, 3220, 3216, 3221, 3222,
     3223, 3224, 3225, 3226, 3212, 3213, 3227, 3214, 3228, 3229,
     3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239,
     3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249,
     3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259,
     3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269,
     3270, 3271, 3273, 3274, 3275, 3276, 3277, 3272, 3278, 3279,
     3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289,

     3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299,
     3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309,
     3310, 3311, 3312, 3313, 3314, 3315, 3316, 3318, 3319, 3320,
     3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3317,
     3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339,
     3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349,
     3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359,
     3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3375,
     3376, 3369, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3370,
     3384, 3385, 3386, 3371, 3387, 3388, 3372, 3373, 3374, 3389,

     3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399,
     3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409,
     3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419,
     3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429,
     3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439,
     3440, 3441, 3442, 3443, 3444, 3447, 3448, 3449, 3450, 3451,
     3452, 3453, 3454, 3455, 3456, 3445, 3457, 3458, 3459, 3460,
     3446, 3461, 3462, 3463, 3464, 3465, 3466, 3468, 3469, 3474,
     3470, 3472, 3477, 3475, 3479, 3480, 3478, 3481, 3482, 3483,
     3467, 3471, 3473, 3484, 3485, 3486, 3487, 3488, 3489, 3476,

     3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509,
     3510, 3511, 3512, 3513, 3515, 3516, 3517, 3518, 3519, 3520,
     3521, 3514, 3522, 3523, 3524, 3525, 3526, 3527, 3529, 3530,
     3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540,
     3541, 3542, 3543, 3528, 3544, 3546, 3547, 3548, 3545, 3549,
     3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559,
     3560, 3561, 3563, 3564, 3565, 3566, 3562, 3567, 3568, 3569,
     3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579,
     3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589,

     3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599,
     3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609,
     3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3619, 3620,
     3621, 3618, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629,
     3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640,
     3641, 3642, 3645, 3643, 3646, 3647, 3630, 3644, 3648, 3649,
     3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,
     3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669,
     3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679,
     3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689,

     3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699,
     3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709,
     3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3720,
     3721, 3722, 3723, 3724, 3725, 3726, 3719, 3727, 3728, 3729,
     3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739,
     3740, 3741, 3742, 3744, 3745, 3746, 3747, 3748, 3749, 3750,
     3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3743, 3759,
     3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769,
     3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779,
     3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789,

     3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799,
     3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809,
     3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819,
     3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829,
     3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840,
     3841, 3842, 3843, 3844, 3830, 3845, 3846, 3847, 3848, 3849,
     3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859,
     3860, 3861, 3862, 3863, 3865, 3866, 3867, 3868, 3869, 3870,
     3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3864, 3879,
     3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889,

     3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899,
     3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909,
     3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3920,
     3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930,
     3931, 3932, 3933, 3919, 3934, 3935, 3936, 3937, 3938, 3939,
     3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949,
     3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959,
     3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969,
     3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979,
     3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989,

     3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999,
     4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009,
     4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019,
     4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029,
     4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039,
     4040, 4041, 4042, 4043, 4044, 4045,   74,   74,   74,   97,
       97,  182,  834,  833,  832,  831,  830,  829,  828,  827,
      826,  825,  824,  823,  820,  819,  818,  817,  804,  803,
      802,  801,  800,  799,  798,  797,  794,  793,  792,  791,
      786,  785,  784,  783,  782,  781,  780,  779,  778,  777,

      776,  775,  772,  771,  770,  769,  768,  767,  753,  752,
      751,  750,  749,  748,  747,  746,  745,  744,  743,  740,
      739,  738,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  704,  703,  702,  699,  698,  697,  696,  695,
      694,  687,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  640,  635,  634,  629,  628,  627,  626,

      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  601,  600,  596,  595,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      536,  535,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  503,  502,  497,  496,  495,
      494,  493,  492,  491,  490,  484,  474,  470,  469,  462,

      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,

      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  271,  270,  269,  268,  265,  264,
      263,  260,  259,  258,  257,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  241,  240,  239,  236,  233,  232,

      231,  230,  229,  228,  227,  226,  223,  222,  219,  215,
      214,  213,  212,  209,  205,  204,  203,  202,  199,  198,
      197,  196,  195,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183, 4046,  174,  173,  172,  164,  163,  160,
      159,  156,  155,  152,  141,  140,  139,  138,  119,  118,
      117,  112,  111,  110,  109,   94,   79,   78,   77,   73,
     4046,    3, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,

     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046
    } ;

static yyconst flex_int16_t yy_chk[4249] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    8,   14,   16,   17,
       17,   17,   17,   23,   23,   18,   25,   25,   16,   14,

       18,   19,  644,   19,   19,   19,   19,   20,   18,   20,
       20,   20,   20,  644,   29,   27,   30,   19,   35,   27,
       30,   29,   50,   20,   27,   29,   27,   40,   29,   50,
       53,   40,   27,   53,    8,   41,   19,   74,   39,   35,
      677,   40,   39,   55,   65,   41,   39,   35,   19,   41,
       42,   55,   41,   35,   20,   39,   39,   51,   39,   65,
       42,   51,  113,   42,   52,   52,   61,   19,   42,   58,
       42,   51,   64,   66,   52,  108,  115,   58,   61,   66,
      108,  115,   64,  303,  143,   74,  143,  303,   64,   84,
       84,   84,   84,   88,   88,   88,   88,   89,  678,   89,

       89,   89,   89,   84,   84,  120,  120,   88,   88,   90,
      113,   90,  120,   89,   90,   90,   90,   90,  127,  122,
      129,  141,  158,  132,  127,  160,  169,  158,  180,  180,
      180,  180,  680,  127,   84,   84,  122,  129,   88,   88,
      132,  141,  159,  169,   89,  160,  165,  208,  418,  175,
      159,  175,  418,  165,  175,  175,  175,  175,  177,  177,
      177,  177,  178,  399,  178,  208,  399,  178,  178,  178,
      178,  304,  177,  177,  181,  181,  181,  181,  234,  381,
      234,  272,  272,  272,  272,  273,  273,  273,  273,  274,
      381,  274,  506,  304,  274,  274,  274,  274,  472,  381,

      273,  506,  472,  177,  177,  276,  276,  276,  276,  277,
      277,  277,  277,  366,  366,  366,  366,  367,  367,  367,
      367,  377,  475,  478,  277,  384,  475,  478,  682,  683,
      638,  273,  367,  377,  377,  377,  475,  377,  377,  383,
      383,  383,  384,  384,  384,  383,  383,  386,  505,  395,
      386,  395,  386,  509,  638,  277,  684,  509,  513,  386,
      386,  395,  505,  367,  685,  398,  398,  510,  395,  398,
      398,  398,  415,  686,  510,  415,  398,  415,  513,  398,
      625,  398,  398,  398,  415,  415,  565,  512,  415,  455,
      455,  455,  512,  512,  455,  604,  574,  455,  625,  688,

      565,  455,  574,  455,  567,  689,  690,  455,  455,  604,
      639,  455,  567,  567,  687,  567,  579,  579,  580,  580,
      639,  580,  579,  580,  687,  691,  579,  579,  579,  659,
      579,  659,  579,  580,  616,  616,  692,  675,  616,  675,
      617,  617,  693,  617,  679,  616,  616,  616,  694,  616,
      617,  695,  616,  616,  654,  654,  654,  681,  679,  681,
      696,  654,  697,  698,  699,  654,  654,  654,  654,  700,
      654,  654,  654,  701,  702,  654,  703,  704,  705,  706,
      707,  709,  705,  708,  708,  710,  708,  711,  713,  714,
      708,  715,  716,  719,  708,  721,  707,  708,  717,  708,

      712,  712,  722,  712,  717,  723,  724,  712,  725,  726,
      718,  712,  718,  727,  712,  720,  712,  720,  718,  720,
      728,  718,  718,  729,  718,  720,  720,  718,  718,  718,
      730,  720,  731,  732,  720,  733,  734,  735,  736,  737,
      738,  739,  740,  741,  742,  743,  744,  746,  747,  748,
      749,  750,  751,  752,  754,  755,  756,  757,  758,  759,
      760,  761,  762,  763,  764,  765,  766,  767,  768,  770,
      772,  773,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  793,  794,  795,  796,  797,  798,  799,  800,  801,

      802,  803,  805,  806,  807,  805,  808,  796,  809,  810,
      811,  812,  813,  814,  815,  816,  817,  818,  819,  818,
      820,  821,  813,  822,  824,  825,  826,  827,  818,  828,
      828,  818,  829,  830,  828,  818,  828,  831,  832,  833,
      828,  834,  835,  836,  837,  838,  828,  839,  828,  840,
      828,  841,  842,  843,  844,  845,  846,  848,  849,  850,
      851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  868,  869,  870,  871,
      872,  873,  870,  874,  875,  876,  877,  878,  879,  880,
      881,  882,  875,  883,  884,  885,  876,  886,  887,  879,

      888,  889,  890,  885,  891,  873,  892,  893,  886,  894,
      895,  896,  889,  897,  898,  899,  900,  883,  901,  902,
      903,  904,  905,  906,  907,  903,  908,  909,  910,  911,
      909,  912,  915,  916,  917,  911,  918,  919,  918,  918,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  935,  938,  940,  941,  943,
      944,  945,  946,  947,  948,  949,  950,  935,  951,  952,
      953,  954,  955,  956,  957,  958,  959,  961,  963,  966,
      967,  968,  969,  970,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  981,  983,  984,  985,  986,  987,  988,

      988,  989,  990,  991,  992,  993,  994,  988,  995,  996,
      997,  988,  998,  988,  988,  999, 1001, 1002,  988, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1001, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033,
     1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1022, 1043,
     1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,

     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1123, 1124, 1112, 1125, 1126,
     1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1135, 1135,
     1131, 1136, 1139, 1135, 1142, 1143, 1144, 1145, 1135, 1146,
     1135, 1135, 1147, 1148, 1151, 1135, 1135, 1152, 1147, 1147,
     1153, 1154, 1155, 1147, 1147, 1158, 1159, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1169, 1169, 1170,
     1172, 1169, 1173, 1174, 1174, 1175, 1169, 1176, 1169, 1177,

     1178, 1179, 1180, 1169, 1169, 1181, 1182, 1169, 1183, 1174,
     1174, 1184, 1185, 1186, 1187, 1187, 1188, 1190, 1189, 1188,
     1188, 1191, 1192, 1188, 1193, 1194, 1196, 1188, 1187, 1189,
     1187, 1187, 1187, 1188, 1188, 1193, 1195, 1188, 1198, 1199,
     1195, 1200, 1201, 1193, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
     1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1252,
     1253, 1254, 1256, 1257, 1258, 1240, 1259, 1260, 1261, 1262,

     1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1274, 1274,
     1277, 1278, 1280, 1281, 1283, 1284, 1285, 1286, 1288, 1291,
     1292, 1294, 1295, 1297, 1298, 1299, 1274, 1300, 1301, 1302,
     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
     1313, 1314, 1315, 1316, 1317, 1318, 1319, 1321, 1322, 1323,
     1324, 1325, 1327, 1329, 1330, 1331, 1332, 1333, 1334, 1336,
     1337, 1338, 1339, 1338, 1340, 1341, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1350, 1352, 1353, 1354, 1356, 1355, 1357,
     1359, 1345, 1355, 1358, 1358, 1360, 1355, 1362, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1373, 1375, 1373, 1373,

     1376, 1377, 1378, 1379, 1380, 1381, 1382, 1382, 1377, 1383,
     1378, 1376, 1384, 1373, 1385, 1373, 1386, 1376, 1382, 1382,
     1387, 1388, 1384, 1389, 1390, 1391, 1392, 1393, 1394, 1393,
     1395, 1396, 1393, 1397, 1393, 1398, 1399, 1401, 1402, 1393,
     1400, 1403, 1393, 1404, 1400, 1400, 1400, 1405, 1406, 1393,
     1407, 1408, 1409, 1410, 1411, 1411, 1412, 1413, 1409, 1412,
     1414, 1415, 1416, 1417, 1408, 1418, 1419, 1420, 1421, 1422,
     1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1438, 1451,

     1452, 1453, 1454, 1455, 1458, 1459, 1460, 1461, 1462, 1463,
     1464, 1465, 1466, 1467, 1468, 1470, 1471, 1472, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1481, 1484, 1485, 1486, 1487,
     1490, 1491, 1492, 1493, 1495, 1498, 1499, 1500, 1505, 1509,
     1514, 1517, 1518, 1519, 1520, 1522, 1523, 1524, 1525, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1537, 1539, 1540,
     1541, 1544, 1545, 1546, 1547, 1548, 1541, 1549, 1550, 1551,
     1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
     1562, 1557, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
     1571, 1569, 1572, 1573, 1574, 1575, 1576, 1579, 1580, 1581,

     1582, 1583, 1584, 1585, 1586, 1588, 1587, 1589, 1590, 1591,
     1592, 1593, 1583, 1587, 1594, 1595, 1596, 1597, 1583, 1598,
     1599, 1583, 1600, 1601, 1602, 1590, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1604, 1610, 1611, 1612, 1613, 1614, 1615,
     1616, 1617, 1618, 1619, 1620, 1621, 1626, 1622, 1618, 1627,
     1617, 1622, 1623, 1623, 1620, 1628, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
     1629, 1644, 1645, 1646, 1635, 1647, 1648, 1649, 1650, 1651,
     1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
     1662, 1663, 1664, 1665, 1666, 1667, 1667, 1669, 1667, 1668,

     1667, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1667, 1667, 1668, 1681, 1682, 1683, 1684, 1685,
     1686, 1687, 1688, 1689, 1690, 1693, 1694, 1695, 1696, 1694,
     1684, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
     1706, 1707, 1709, 1710, 1713, 1714, 1715, 1716, 1717, 1718,
     1719, 1720, 1721, 1722, 1725, 1726, 1727, 1728, 1730, 1732,
     1733, 1734, 1735, 1736, 1734, 1738, 1741, 1744, 1745, 1734,
     1746, 1747, 1748, 1750, 1751, 1752, 1753, 1755, 1756, 1758,
     1760, 1761, 1746, 1746, 1746, 1762, 1763, 1746, 1746, 1764,
     1765, 1766, 1767, 1768, 1746, 1769, 1770, 1771, 1772, 1773,

     1774, 1775, 1776, 1778, 1779, 1781, 1782, 1783, 1784, 1786,
     1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1797,
     1789, 1796, 1798, 1799, 1789, 1789, 1800, 1796, 1801, 1801,
     1802, 1803, 1805, 1806, 1807, 1808, 1809, 1810, 1807, 1803,
     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
     1821, 1822, 1823, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
     1842, 1843, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
     1854, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
     1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,

     1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
     1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
     1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1909, 1911, 1913, 1914, 1915, 1917,
     1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1927, 1922,
     1926, 1926, 1926, 1922, 1922, 1922, 1931, 1933, 1934, 1936,
     1937, 1938, 1939, 1926, 1940, 1941, 1942, 1944, 1926, 1945,
     1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
     1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1951,
     1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1963, 1973,

     1974, 1975, 1976, 1977, 1978, 1979, 1980, 1982, 1983, 1984,
     1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1994, 1995,
     1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2003,
     2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2005, 2014,
     2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2024, 2025,
     2026, 2027, 2028, 2030, 2031, 2032, 2034, 2035, 2036, 2037,
     2038, 2040, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2048,
     2049, 2050, 2051, 2052, 2048, 2048, 2053, 2054, 2048, 2055,
     2048, 2048, 2056, 2057, 2058, 2048, 2059, 2060, 2061, 2062,
     2063, 2064, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2074,

     2075, 2076, 2078, 2079, 2080, 2081, 2080, 2082, 2083, 2084,
     2085, 2086, 2087, 2089, 2090, 2091, 2092, 2093, 2095, 2096,
     2097, 2098, 2080, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
     2107, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
     2118, 2119, 2119, 2119, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
     2137, 2138, 2140, 2139, 2141, 2128, 2139, 2128, 2142, 2143,
     2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2139, 2152,
     2153, 2158, 2159, 2143, 2160, 2161, 2162, 2163, 2165, 2166,
     2167, 2168, 2169, 2160, 2170, 2171, 2172, 2173, 2175, 2160,

     2176, 2177, 2178, 2179, 2180, 2181, 2182, 2184, 2185, 2186,
     2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
     2199, 2201, 2202, 2203, 2204, 2205, 2207, 2208, 2209, 2211,
     2212, 2213, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
     2223, 2221, 2224, 2225, 2221, 2226, 2227, 2228, 2229, 2230,
     2231, 2221, 2221, 2232, 2233, 2234, 2235, 2236, 2237, 2239,
     2240, 2241, 2242, 2244, 2245, 2247, 2249, 2250, 2252, 2254,
     2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264,
     2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274,
     2275, 2276, 2277, 2278, 2279, 2280, 2282, 2284, 2285, 2286,

     2287, 2273, 2275, 2273, 2289, 2290, 2292, 2293, 2294, 2295,
     2296, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2306, 2305,
     2304, 2305, 2305, 2307, 2308, 2309, 2310, 2311, 2312, 2313,
     2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323,
     2324, 2325, 2326, 2327, 2328, 2329, 2330, 2334, 2335, 2336,
     2337, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348,
     2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358,
     2357, 2359, 2360, 2361, 2362, 2363, 2364, 2357, 2365, 2367,
     2368, 2369, 2371, 2372, 2373, 2374, 2375, 2376, 2379, 2381,
     2382, 2383, 2384, 2367, 2385, 2386, 2387, 2390, 2391, 2393,

     2384, 2395, 2396, 2397, 2399, 2400, 2401, 2403, 2404, 2405,
     2406, 2407, 2408, 2411, 2413, 2415, 2416, 2418, 2419, 2420,
     2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430,
     2431, 2432, 2433, 2434, 2435, 2436, 2436, 2437, 2438, 2439,
     2440, 2441, 2442, 2444, 2445, 2446, 2436, 2447, 2448, 2451,
     2452, 2454, 2457, 2458, 2460, 2462, 2463, 2464, 2465, 2466,
     2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2472,
     2476, 2477, 2472, 2478, 2479, 2480, 2480, 2481, 2482, 2472,
     2483, 2484, 2485, 2487, 2488, 2489, 2483, 2491, 2492, 2493,
     2496, 2497, 2498, 2483, 2483, 2499, 2500, 2501, 2502, 2503,

     2504, 2505, 2504, 2506, 2507, 2508, 2509, 2510, 2511, 2512,
     2514, 2515, 2516, 2517, 2519, 2520, 2521, 2522, 2504, 2523,
     2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533,
     2535, 2536, 2537, 2538, 2541, 2542, 2543, 2544, 2545, 2546,
     2547, 2550, 2547, 2548, 2551, 2552, 2553, 2555, 2554, 2547,
     2554, 2548, 2556, 2557, 2558, 2559, 2560, 2561, 2548, 2562,
     2563, 2564, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2574,
     2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584,
     2585, 2587, 2589, 2591, 2593, 2595, 2596, 2597, 2598, 2599,
     2601, 2602, 2583, 2606, 2607, 2609, 2610, 2611, 2612, 2613,

     2614, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624,
     2625, 2626, 2627, 2628, 2629, 2632, 2633, 2634, 2635, 2636,
     2637, 2638, 2640, 2641, 2645, 2646, 2647, 2648, 2649, 2650,
     2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660,
     2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670,
     2671, 2672, 2673, 2674, 2669, 2675, 2676, 2677, 2679, 2680,
     2676, 2681, 2682, 2683, 2684, 2685, 2686, 2677, 2687, 2688,
     2677, 2687, 2690, 2677, 2677, 2691, 2692, 2693, 2694, 2695,
     2696, 2693, 2697, 2698, 2699, 2688, 2700, 2701, 2702, 2703,
     2704, 2705, 2703, 2703, 2706, 2707, 2708, 2709, 2710, 2698,

     2711, 2713, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722,
     2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732,
     2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742,
     2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2754, 2755,
     2756, 2758, 2759, 2760, 2760, 2761, 2762, 2763, 2759, 2764,
     2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2776,
     2764, 2777, 2778, 2783, 2784, 2785, 2786, 2790, 2792, 2793,
     2794, 2795, 2796, 2797, 2798, 2797, 2797, 2799, 2797, 2797,
     2800, 2801, 2802, 2803, 2797, 2804, 2806, 2805, 2807, 2805,
     2808, 2797, 2797, 2805, 2809, 2810, 2811, 2813, 2815, 2816,

     2817, 2818, 2819, 2820, 2821, 2823, 2824, 2825, 2826, 2827,
     2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837,
     2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847,
     2848, 2849, 2850, 2851, 2852, 2853, 2856, 2857, 2858, 2859,
     2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869,
     2870, 2871, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880,
     2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890,
     2891, 2892, 2893, 2895, 2896, 2897, 2898, 2899, 2885, 2900,
     2901, 2903, 2904, 2906, 2907, 2908, 2909, 2910, 2911, 2912,
     2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922,

     2923, 2924, 2925, 2926, 2927, 2928, 2930, 2931, 2932, 2933,
     2936, 2938, 2939, 2940, 2943, 2945, 2946, 2947, 2948, 2949,
     2953, 2955, 2956, 2957, 2960, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976,
     2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986,
     2992, 2993, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002,
     3003, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013,
     3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023,
     3024, 3026, 3027, 3031, 3032, 3033, 3034, 3035, 3036, 3037,
     3038, 3039, 3041, 3042, 3043, 3045, 3047, 3049, 3050, 3051,

     3053, 3054, 3055, 3056, 3057, 3058, 3064, 3065, 3053, 3066,
     3067, 3068, 3069, 3071, 3072, 3074, 3075, 3076, 3077, 3079,
     3080, 3081, 3082, 3083, 3084, 3085, 3086, 3082, 3087, 3088,
     3089, 3090, 3091, 3092, 3081, 3081, 3093, 3081, 3094, 3095,
     3096, 3097, 3098, 3099, 3100, 3102, 3103, 3104, 3105, 3106,
     3109, 3110, 3111, 3112, 3113, 3116, 3117, 3118, 3119, 3120,
     3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3131,
     3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3142,
     3145, 3147, 3148, 3149, 3150, 3151, 3152, 3147, 3153, 3154,
     3156, 3157, 3158, 3159, 3161, 3162, 3163, 3164, 3165, 3166,

     3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176,
     3177, 3178, 3179, 3180, 3181, 3183, 3184, 3185, 3186, 3187,
     3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197,
     3198, 3200, 3202, 3203, 3205, 3206, 3207, 3208, 3209, 3194,
     3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219,
     3220, 3222, 3223, 3224, 3225, 3226, 3227, 3229, 3232, 3233,
     3235, 3237, 3238, 3239, 3240, 3241, 3245, 3246, 3247, 3249,
     3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259,
     3260, 3258, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3258,
     3269, 3271, 3272, 3258, 3273, 3274, 3258, 3258, 3258, 3275,

     3276, 3277, 3278, 3279, 3280, 3281, 3282, 3285, 3286, 3287,
     3288, 3289, 3291, 3292, 3293, 3295, 3296, 3297, 3298, 3299,
     3303, 3304, 3305, 3307, 3309, 3311, 3312, 3313, 3315, 3316,
     3317, 3319, 3321, 3323, 3324, 3325, 3326, 3327, 3328, 3329,
     3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339,
     3340, 3341, 3342, 3343, 3344, 3345, 3347, 3349, 3350, 3353,
     3354, 3355, 3356, 3357, 3358, 3344, 3359, 3360, 3361, 3362,
     3344, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3373,
     3371, 3372, 3374, 3373, 3375, 3376, 3374, 3377, 3378, 3379,
     3368, 3371, 3372, 3380, 3381, 3382, 3383, 3384, 3385, 3373,

     3386, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3397,
     3398, 3399, 3400, 3401, 3403, 3405, 3406, 3407, 3408, 3409,
     3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419,
     3420, 3413, 3421, 3422, 3423, 3425, 3426, 3427, 3428, 3429,
     3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3440,
     3441, 3442, 3443, 3427, 3444, 3445, 3446, 3447, 3444, 3448,
     3451, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461,
     3462, 3463, 3464, 3465, 3466, 3467, 3463, 3468, 3469, 3470,
     3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3481,
     3482, 3483, 3484, 3485, 3487, 3488, 3489, 3490, 3491, 3492,

     3493, 3494, 3495, 3496, 3497, 3498, 3499, 3503, 3506, 3507,
     3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517,
     3518, 3519, 3520, 3521, 3522, 3525, 3526, 3527, 3528, 3529,
     3530, 3527, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538,
     3539, 3540, 3542, 3543, 3544, 3545, 3546, 3547, 3549, 3550,
     3552, 3553, 3556, 3555, 3557, 3558, 3538, 3555, 3559, 3560,
     3561, 3562, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571,
     3572, 3573, 3574, 3575, 3576, 3579, 3580, 3581, 3582, 3584,
     3585, 3587, 3588, 3590, 3591, 3592, 3593, 3595, 3596, 3597,
     3598, 3599, 3600, 3601, 3602, 3603, 3604, 3607, 3610, 3611,

     3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621,
     3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631,
     3633, 3634, 3635, 3636, 3637, 3638, 3639, 3641, 3642, 3643,
     3644, 3645, 3647, 3648, 3649, 3650, 3642, 3651, 3652, 3653,
     3654, 3656, 3657, 3661, 3664, 3665, 3667, 3669, 3670, 3671,
     3672, 3673, 3675, 3676, 3678, 3681, 3682, 3683, 3684, 3687,
     3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3675, 3696,
     3697, 3698, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707,
     3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717,
     3718, 3719, 3720, 3721, 3723, 3724, 3725, 3726, 3727, 3728,

     3730, 3731, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740,
     3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750,
     3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760,
     3762, 3763, 3764, 3766, 3767, 3768, 3769, 3770, 3771, 3772,
     3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782,
     3783, 3785, 3786, 3787, 3772, 3789, 3790, 3791, 3792, 3794,
     3795, 3796, 3798, 3799, 3800, 3801, 3802, 3805, 3808, 3809,
     3810, 3812, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821,
     3822, 3823, 3825, 3827, 3828, 3829, 3830, 3831, 3815, 3832,
     3833, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3843, 3845,

     3846, 3847, 3849, 3853, 3855, 3856, 3857, 3859, 3860, 3861,
     3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871,
     3872, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883,
     3884, 3885, 3886, 3887, 3888, 3889, 3890, 3893, 3894, 3896,
     3897, 3898, 3899, 3882, 3900, 3901, 3902, 3903, 3904, 3905,
     3906, 3908, 3909, 3912, 3913, 3914, 3915, 3916, 3917, 3918,
     3919, 3920, 3921, 3922, 3923, 3924, 3925, 3927, 3928, 3931,
     3932, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942,
     3943, 3944, 3945, 3946, 3949, 3950, 3951, 3952, 3953, 3954,
     3959, 3960, 3962, 3963, 3964, 3965, 3968, 3970, 3971, 3972,

     3973, 3974, 3975, 3976, 3977, 3979, 3980, 3981, 3982, 3983,
     3984, 3985, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994,
     3995, 3998, 3999, 4000, 4001, 4002, 4003, 4005, 4006, 4007,
     4009, 4010, 4011, 4012, 4014, 4015, 4016, 4017, 4018, 4019,
     4020, 4021, 4022, 4023, 4024, 4025, 4027, 4028, 4029, 4030,
     4032, 4034, 4037, 4038, 4039, 4042, 4047, 4047, 4047, 4048,
     4048, 4049,  673,  671,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  658,  657,  656,  655,  653,  651,
      650,  649,  648,  647,  646,  645,  643,  642,  641,  640,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,

      627,  626,  624,  623,  622,  621,  620,  619,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  577,  576,  575,  573,  572,  571,  570,  569,
      568,  563,  561,  560,  558,  557,  555,  554,  553,  552,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  527,  526,  525,  524,  522,  520,  519,  518,  517,
      516,  515,  514,  511,  508,  507,  504,  503,  502,  501,

      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  477,  476,  474,  473,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  452,  451,  449,  448,  447,  446,  445,  444,
      443,  442,  440,  439,  438,  437,  436,  434,  433,  432,
      431,  430,  426,  425,  424,  423,  422,  421,  420,  419,
      417,  416,  414,  413,  412,  411,  410,  408,  407,  405,
      404,  403,  402,  401,  400,  397,  396,  394,  393,  392,
      391,  390,  389,  388,  387,  385,  382,  379,  378,  376,

      375,  374,  373,  372,  371,  370,  369,  368,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      342,  341,  340,  339,  338,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  302,  301,  300,  299,
      298,  297,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,

      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  248,  247,  246,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  194,  193,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  183,  173,  172,  171,  170,  168,  167,
      166,  164,  163,  162,  161,  157,  156,  155,  154,  152,
      151,  150,  149,  148,  147,  145,  144,  142,  140,  139,

      138,  137,  136,  135,  134,  133,  131,  130,  128,  126,
      125,  124,  123,  121,  119,  118,  117,  116,  114,  112,
      111,  110,  109,  107,  106,  105,  104,  103,  102,  101,
      100,   99,   98,   76,   70,   68,   67,   63,   62,   60,
       59,   57,   56,   54,   49,   45,   44,   43,   38,   37,
       36,   34,   33,   32,   31,   24,   13,   10,    9,    7,
        3, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,

     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
#line 12 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
#include "linden_common.h"
// Deal with the fact that lex/yacc generates unreachable code
#ifdef LL_WINDOWS
#pragma warning (disable : 4018) // warning C4018: signed/unsigned mismatch
#pragma warning (disable : 4702) // warning C4702: unreachable code
#endif	//	LL_WINDOWS
#include "llmath.h"
#include "lscript_tree.h"
#include "lscript_typecheck.h"
#include "lscript_resource.h"
#include "indra.y.hpp"
#include "lltimer.h"
#include "indra_constants.h"
#include "llagentconstants.h"
#include "lllslconstants.h"
#include "lluuid.h"
#include "llassetstorage.h"
#include "llpartdata.h"
#include "llvehicleparams.h"
#include "llpermissionsflags.h"
#include "llfollowcamparams.h"
#include "llparcelflags.h"
#include "llregionflags.h"
#include "lscript_http.h"
#include "llclickaction.h"
#include "llmediaentry.h"

void count();
void line_comment();
void block_comment();
void parse_string();

#define YYLMAX 16384
#define YY_NEVER_INTERACTIVE 1 /* stops flex from calling isatty() */
#ifdef LL_WINDOWS
#define isatty(x) 0 /* hack for bug in cygwin flex 2.5.35 */
#endif

#ifdef ECHO
#undef ECHO
#endif

#define ECHO do { } while (0)

#if defined(__cplusplus)
extern "C" { int yylex(void ); }
extern "C" { int yyparse( void ); }
extern "C" { int yyerror(const char *fmt, ...); }
#endif

#line 2773 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 64 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"

#line 2957 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 4047 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4162 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ gInternalLine++; gInternalColumn = 0; line_comment(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ block_comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(INTEGER); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 69 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(FLOAT_TYPE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(STRING); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 71 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LLKEY); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 72 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(VECTOR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(QUATERNION); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 74 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(QUATERNION); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 75 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LIST); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 77 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.sval = new char[strlen(yytext) + 1]; strcpy(yylval.sval, yytext); return(STATE_DEFAULT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 78 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(STATE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 79 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(EVENT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 80 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(JUMP); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 81 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(RETURN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 82 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(IF); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 83 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(ELSE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 84 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(FOR); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 85 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(DO); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 86 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(WHILE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 88 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(STATE_ENTRY); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 89 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(STATE_EXIT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 90 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH_START); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 91 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 92 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH_END); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 93 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(COLLISION_START); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 94 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(COLLISION); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 95 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(COLLISION_END); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 96 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LAND_COLLISION_START); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 97 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LAND_COLLISION); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 98 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LAND_COLLISION_END); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 99 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(TIMER); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 100 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(CHAT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 101 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(SENSOR); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 102 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(NO_SENSOR); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 103 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(CONTROL); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 104 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(PRINT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 105 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(AT_TARGET); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 106 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(NOT_AT_TARGET); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 107 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(AT_ROT_TARGET); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 108 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(NOT_AT_ROT_TARGET); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 109 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(MONEY); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 110 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(EMAIL); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 111 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(RUN_TIME_PERMISSIONS); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 112 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(INVENTORY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 113 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(ATTACH); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 114 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(DATASERVER); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(MOVING_START); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(MOVING_END); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 117 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LINK_MESSAGE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 118 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(REZ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(OBJECT_REZ); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 120 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(REMOTE_DATA); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(HTTP_RESPONSE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(HTTP_REQUEST); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(PERIOD); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 126 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = strtoul(yytext, NULL, 0);  return(INTEGER_CONSTANT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 127 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = strtoul(yytext, NULL, 10); return(INTEGER_CONSTANT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 128 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_TRUE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 129 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0; return(INTEGER_FALSE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 130 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 131 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 132 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 133 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 134 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 135 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 136 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 137 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x80; return(INTEGER_CONSTANT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 138 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x100; return(INTEGER_CONSTANT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 139 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x200; return(INTEGER_CONSTANT); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 141 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_FLYING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 142 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_ATTACHMENTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 143 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_SCRIPTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 144 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_MOUSELOOK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_SITTING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_ON_OBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 147 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_AWAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 148 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_WALKING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 149 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_IN_AIR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 150 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_TYPING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 151 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CROUCHING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 152 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_BUSY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_ALWAYS_RUN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 154 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_AUTOPILOT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 156 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_PITCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 157 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_OFFSET; return (INTEGER_CONSTANT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 158 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 159 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 160 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_DISTANCE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 161 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_BEHINDNESS_ANGLE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 162 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_BEHINDNESS_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 163 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_THRESHOLD; return (INTEGER_CONSTANT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 164 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_THRESHOLD; return (INTEGER_CONSTANT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 165 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_ACTIVE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 166 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION; return (INTEGER_CONSTANT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 167 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS; return (INTEGER_CONSTANT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 168 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_LOCKED; return (INTEGER_CONSTANT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 169 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_LOCKED; return (INTEGER_CONSTANT); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 171 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 172 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 173 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 174 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 175 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 176 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 177 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 179 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_ALL_SIDES; return(INTEGER_CONSTANT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 180 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_ROOT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 181 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_SET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 182 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_ALL_OTHERS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 183 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_ALL_CHILDREN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 184 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_LINK_THIS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 186 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 187 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 188 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 189 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 191 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_AT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 192 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_AT_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 193 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LEFT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 194 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LEFT_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_YAW_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 196 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_YAW_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 197 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_UP_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 198 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_UP_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 199 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LBUTTON_DOWN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 200 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = AGENT_CONTROL_ML_LBUTTON_DOWN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 202 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_DEBIT]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 203 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TAKE_CONTROLS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 204 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_REMAP_CONTROLS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 205 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TRIGGER_ANIMATION]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 206 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_ATTACH]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 207 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_RELEASE_OWNERSHIP]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 208 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_LINKS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 209 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_JOINTS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 210 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_PERMISSIONS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 211 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TRACK_CAMERA]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 212 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CONTROL_CAMERA]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 214 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 215 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_SOUND; return(INTEGER_CONSTANT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 216 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_OBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 217 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_LSL_TEXT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 218 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_LANDMARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 219 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_CLOTHING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 220 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_NOTECARD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 221 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_BODYPART; return(INTEGER_CONSTANT); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 222 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_ANIMATION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 223 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_GESTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 224 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 225 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLAssetType::AT_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 227 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_INVENTORY; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 228 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_COLOR; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 229 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_SHAPE; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 230 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_SCALE; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 231 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_TEXTURE; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 232 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_LINK; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 233 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_ALLOWED_DROP; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 234 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_OWNER; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 235 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_REGION; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 236 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_TELEPORT; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 237 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_REGION_START; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 238 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHANGED_MEDIA; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 240 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_UNKNOWN_DETAIL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 241 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_NAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 242 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 243 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 244 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_ROT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 245 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_VELOCITY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 246 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 247 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 248 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OBJECT_CREATOR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 250 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_INTEGER; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 251 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_FLOATINGPOINT; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 252 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_STRING; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 253 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_KEY; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 254 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_VECTOR; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 255 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_QUATERNION; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 256 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LST_NULL; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 258 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "00000000-0000-0000-0000-000000000000"); return(STRING_CONSTANT); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 259 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "\n\n\n"); return(STRING_CONSTANT); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 260 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, URL_REQUEST_GRANTED); return(STRING_CONSTANT); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 261 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, URL_REQUEST_DENIED); return(STRING_CONSTANT); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 263 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_PI; return(FP_CONSTANT); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 264 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_TWO_PI; return(FP_CONSTANT); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 265 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_PI_BY_TWO; return(FP_CONSTANT); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 266 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = DEG_TO_RAD; return(FP_CONSTANT); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 267 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = RAD_TO_DEG; return(FP_CONSTANT); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 268 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = F_SQRT2; return(FP_CONSTANT); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 270 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CHAT_CHANNEL_DEBUG; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 271 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 273 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(ZERO_VECTOR); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 274 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(ZERO_ROTATION); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 276 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 277 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 278 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 279 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 280 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 5; return(INTEGER_CONSTANT); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 281 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 6; return(INTEGER_CONSTANT); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 282 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 7; return(INTEGER_CONSTANT); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 283 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 284 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 9; return(INTEGER_CONSTANT); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 285 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 286 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 11; return(INTEGER_CONSTANT); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 287 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 12; return(INTEGER_CONSTANT); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 288 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 13; return(INTEGER_CONSTANT); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 289 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 14; return(INTEGER_CONSTANT); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 290 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 15; return(INTEGER_CONSTANT); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 291 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 16; return(INTEGER_CONSTANT); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 292 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 17; return(INTEGER_CONSTANT); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 293 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 18; return(INTEGER_CONSTANT); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 294 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 19; return(INTEGER_CONSTANT); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 295 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 296 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 21; return(INTEGER_CONSTANT); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 297 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 22; return(INTEGER_CONSTANT); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 298 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 23; return(INTEGER_CONSTANT); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 299 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 24; return(INTEGER_CONSTANT); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 300 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 25; return(INTEGER_CONSTANT); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 301 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 26; return(INTEGER_CONSTANT); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 302 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 27; return(INTEGER_CONSTANT); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 303 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 28; return(INTEGER_CONSTANT); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 304 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 29; return(INTEGER_CONSTANT); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 305 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 30; return(INTEGER_CONSTANT); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 306 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 31; return(INTEGER_CONSTANT); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 307 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 32; return(INTEGER_CONSTANT); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 308 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 33; return(INTEGER_CONSTANT); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 309 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 34; return(INTEGER_CONSTANT); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 310 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 35; return(INTEGER_CONSTANT); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 311 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 36; return(INTEGER_CONSTANT); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 312 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 37; return(INTEGER_CONSTANT); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 313 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 38; return(INTEGER_CONSTANT); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 315 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_LEVEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 316 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_RAISE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 317 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_LOWER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 318 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_SMOOTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 319 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_NOISE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 320 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = E_LANDBRUSH_REVERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 322 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 323 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 324 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 326 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 327 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 328 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 329 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 330 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 5; return(INTEGER_CONSTANT); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 331 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 6; return(INTEGER_CONSTANT); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 332 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 7; return(INTEGER_CONSTANT); }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 333 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 335 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 336 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 338 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_CHANNEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 339 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_REQUEST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 340 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_REPLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 343 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_FLAGS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 344 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_START_COLOR; return (INTEGER_CONSTANT); }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 345 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_START_ALPHA; return (INTEGER_CONSTANT); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 346 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_START_SCALE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 347 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_END_COLOR; return (INTEGER_CONSTANT); }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 348 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_END_ALPHA; return (INTEGER_CONSTANT); }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 349 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_END_SCALE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 350 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_PART_MAX_AGE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 353 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_WIND_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 354 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_INTERP_COLOR_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 355 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_INTERP_SCALE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 356 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_BOUNCE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 357 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_FOLLOW_SRC_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 358 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_FOLLOW_VELOCITY_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 359 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_TARGET_POS_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 360 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_EMISSIVE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 361 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_TARGET_LINEAR_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 364 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_MAX_AGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 365 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_PATTERN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 366 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_INNERANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 367 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_OUTERANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 368 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_ANGLE_BEGIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 369 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_ANGLE_END; return(INTEGER_CONSTANT); }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 370 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_RATE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 371 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_PART_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 372 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_RADIUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 373 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_SPEED_MIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 374 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_SPEED_MAX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 375 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_ACCEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 376 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 377 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_TARGET_UUID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 378 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPS_SRC_OMEGA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 380 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_OBJ_REL_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 382 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_DROP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 383 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_EXPLODE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 384 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 385 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE_CONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 386 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE_CONE_EMPTY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 389 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 390 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_SLED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 391 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_CAR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 392 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_BOAT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 393 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_AIRPLANE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 394 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_BALLOON; return(INTEGER_CONSTANT); }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 396 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_REFERENCE_FRAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 397 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_FRICTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 398 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_FRICTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 399 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_DIRECTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 400 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_DIRECTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 401 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_OFFSET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 405 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_HEIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 406 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 407 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 408 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BUOYANCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 410 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_DEFLECTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 411 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_DEFLECTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 412 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 413 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 415 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 416 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_DEFLECTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 417 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 418 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 420 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 421 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_VERTICAL_ATTRACTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 423 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 424 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_MIX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 425 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 427 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_NO_DEFLECTION_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 428 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_NO_DEFLECTION_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 429 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_LIMIT_ROLL_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 430 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_WATER_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 431 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_TERRAIN_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 432 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 433 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_UP_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 434 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_LIMIT_MOTOR_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 435 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_MOUSELOOK_STEER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 436 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_MOUSELOOK_BANK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 437 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_CAMERA_DECOUPLED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 441 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 442 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 443 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_PHYSICS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 444 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_FLEXIBLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 445 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_POINT_LIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 446 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEMP_ON_REZ; return(INTEGER_CONSTANT); }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 447 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_PHANTOM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 448 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_CAST_SHADOWS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 449 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_POSITION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 450 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 451 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_ROTATION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 452 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 453 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_COLOR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 454 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SHINY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 455 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_FULLBRIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 456 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 457 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_GLOW; return(INTEGER_CONSTANT); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 459 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_BOX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 460 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_CYLINDER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 461 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_PRISM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 462 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_SPHERE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 463 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_TORUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 464 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_TUBE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 465 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_RING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 466 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_SCULPT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 468 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 469 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_CIRCLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 470 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_SQUARE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 471 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_TRIANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 473 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_STONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 474 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_METAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 475 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_GLASS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 476 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_WOOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 477 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_FLESH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 478 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_PLASTIC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 479 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_RUBBER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 480 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_LIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 482 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 483 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_LOW; return(INTEGER_CONSTANT); }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 484 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_MEDIUM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 485 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_HIGH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 487 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 488 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BRIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 489 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_DARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 490 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_WOOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 491 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 492 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BRICKS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 493 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_CHECKER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 494 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_CONCRETE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 495 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_TILE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 496 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_STONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 497 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_DISKS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 498 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_GRAVEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 499 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BLOBS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 500 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SIDING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 501 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_LARGETILE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 502 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_STUCCO; return(INTEGER_CONSTANT); }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 503 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SUCTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 504 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_WEAVE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 506 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 507 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN_PLANAR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 509 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_SPHERE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 510 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_TORUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 511 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_PLANE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 512 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_CYLINDER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 513 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 514 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_FLAG_MIRROR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 515 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_FLAG_INVERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 517 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 0; return(INTEGER_CONSTANT); }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 518 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 519 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 520 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 521 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 523 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_TRANSFER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 524 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_MODIFY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 525 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_COPY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 526 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_MOVE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 527 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PERM_ALL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 529 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_STOP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 530 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_PAUSE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 531 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_PLAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 532 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_LOOP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 533 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 534 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_URL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 535 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TIME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 536 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_AGENT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 537 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_UNLOAD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 538 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_AUTO_ALIGN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 539 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 540 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 541 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 542 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_LOOP_SET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 544 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MAX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 545 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 546 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MEAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 547 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_MEDIAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 548 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_STD_DEV; return(INTEGER_CONSTANT); }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 549 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_SUM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 550 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_SUM_SQUARES; return(INTEGER_CONSTANT); }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 551 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_NUM_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 552 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_GEO_MEAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 553 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LIST_STAT_RANGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 555 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PAY_PRICE_HIDE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 556 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PAY_PRICE_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 558 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_FLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 559 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_GROUP_SCRIPTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 560 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_OTHER_SCRIPTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 561 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_LANDMARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 562 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_TERRAFORM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 563 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_DAMAGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 564 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_CREATE_OBJECTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 565 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_CREATE_GROUP_OBJECTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 566 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_ACCESS_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 567 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_ACCESS_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 568 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_BAN_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 569 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_USE_PASS_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 570 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_SOUND_LOCAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 571 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_RESTRICT_PUSHOBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 572 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_GROUP_OBJECT_ENTRY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 573 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PF_ALLOW_ALL_OBJECT_ENTRY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 575 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_ALLOW_DAMAGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 576 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SUN_FIXED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 577 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_BLOCK_TERRAFORM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 578 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SANDBOX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 579 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SKIP_COLLISIONS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 580 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_SKIP_PHYSICS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 581 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_BLOCK_FLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 582 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_ALLOW_DIRECT_TELEPORT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 583 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = REGION_FLAGS_RESTRICT_PUSHOBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 585 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_METHOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 586 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_MIMETYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 587 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_BODY_MAXLENGTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 588 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_BODY_TRUNCATED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 589 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = HTTP_VERIFY_CERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 591 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_TOTAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 592 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 593 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 594 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_OTHER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 595 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_SELECTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 596 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = OC_TEMP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 598 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_NAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 599 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 600 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 601 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 602 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_AREA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 604 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = STRING_TRIM_HEAD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 605 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = STRING_TRIM_TAIL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 606 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = STRING_TRIM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 608 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 609 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_TOUCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 610 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_SIT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 611 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_BUY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 612 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_PAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 613 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_OPEN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 614 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_PLAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 615 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_OPEN_MEDIA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 616 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = CLICK_ACTION_ZOOM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 618 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "5748decc-f629-461c-9a36-a35a221fe21f"); return(STRING_CONSTANT); }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 619 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "89556747-24cb-43ed-920b-47caed15465f"); return(STRING_CONSTANT); }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 620 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "8b5fec65-8d8d-9dc5-cda8-8fdf2716e361"); return(STRING_CONSTANT); }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 621 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "89556747-24cb-43ed-920b-47caed15465f"); return(STRING_CONSTANT); }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 622 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "8dcd4a48-2d37-4909-9f78-f7a9eb4ef903"); return(STRING_CONSTANT); }
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 624 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = -1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 625 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH_INVALID_VECTOR); }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 626 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(TOUCH_INVALID_TEXCOORD); }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 628 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::ALT_IMAGE_ENABLE_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 629 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::CONTROLS_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 630 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::CURRENT_URL_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 631 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::HOME_URL_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 632 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::AUTO_LOOP_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 633 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::AUTO_PLAY_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 634 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::AUTO_SCALE_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 635 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::AUTO_ZOOM_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 636 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::FIRST_CLICK_INTERACT_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 637 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::WIDTH_PIXELS_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 638 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::HEIGHT_PIXELS_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 639 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::WHITELIST_ENABLE_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 640 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::WHITELIST_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 641 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PERMS_INTERACT_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 642 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PERMS_CONTROL_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 643 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PARAM_MAX_ID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 645 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::STANDARD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 646 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::MINI; return(INTEGER_CONSTANT); }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 648 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PERM_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 649 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PERM_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 650 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PERM_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 651 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::PERM_ANYONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 653 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::MAX_URL_LENGTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 654 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::MAX_WHITELIST_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 655 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::MAX_WHITELIST_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 656 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::MAX_WIDTH_PIXELS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 657 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LLMediaEntry::MAX_HEIGHT_PIXELS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 659 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_OK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 660 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_MALFORMED_PARAMS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 661 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_TYPE_MISMATCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 662 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_BOUNDS_ERROR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 663 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_NOT_FOUND; return(INTEGER_CONSTANT); }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 664 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_NOT_SUPPORTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 665 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_INTERNAL_ERROR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 666 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.ival = LSL_STATUS_WHITELIST_FAILED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 668 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.sval = new char[strlen(yytext) + 1]; strcpy(yylval.sval, yytext); return(IDENTIFIER); }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 670 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 671 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 672 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 533:
/* rule 533 can match eol */
YY_RULE_SETUP
#line 674 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ parse_string(); count(); return(STRING_CONSTANT); }
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 676 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(INC_OP); }
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 677 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(DEC_OP); }
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 678 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(ADD_ASSIGN); }
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 679 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(SUB_ASSIGN); }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 680 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(MUL_ASSIGN); }
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 681 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(DIV_ASSIGN); }
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 682 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(MOD_ASSIGN); }
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 683 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(';'); }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 684 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('{'); }
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 685 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('}'); }
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 686 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(','); }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 687 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('='); }
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 688 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('('); }
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 689 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(')'); }
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 690 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('-'); }
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 691 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('+'); }
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 692 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('*'); }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 693 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('/'); }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 694 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('%'); }
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 695 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('@'); }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 696 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(':'); }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 697 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('>'); }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 698 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('<'); }
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 699 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(']'); }
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 700 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('['); }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 701 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(EQ);  }
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 702 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(NEQ);  }
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 703 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(GEQ);  }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 704 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(LEQ);  }
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 705 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('&');  }
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 706 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('|');  }
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 707 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('^');  }
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 708 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('~');  }
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 709 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return('!');  }
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 710 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(BOOLEAN_AND);	}
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 711 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(BOOLEAN_OR);	}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 712 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(SHIFT_LEFT);  }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 713 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); return(SHIFT_RIGHT); }
	YY_BREAK
case 572:
/* rule 572 can match eol */
YY_RULE_SETUP
#line 715 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ count(); }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 716 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
{ /* ignore bad characters */ }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 718 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"
ECHO;
	YY_BREAK
#line 5912 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 4047 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 4047 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 4046);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 718 "C:/Code/Snowglobe/viewer-development/indra/lscript/lscript_compile/indra.l"



LLScriptAllocationManager	*gAllocationManager;
LLScriptScript				*gScriptp;

// Prototype for the yacc parser entry point
int yyparse(void);

int yyerror(const char *fmt, ...)
{
	gErrorToText.writeError(yyout, gLine, gColumn, LSERROR_SYNTAX_ERROR);
	return 0;
}

//#define EMERGENCY_DEBUG_PRINTOUTS
//#define EMIT_CIL_ASSEMBLER

BOOL lscript_compile(const char* src_filename, const char* dst_filename,
					 const char* err_filename, BOOL compile_to_mono, const char* class_name, BOOL is_god_like)
{
	BOOL			b_parse_ok = FALSE;
	BOOL			b_dummy = FALSE;
	U64				b_dummy_count = FALSE;
	LSCRIPTType		type = LST_NULL;

	gInternalColumn = 0;
	gInternalLine = 0;
	gScriptp = NULL;

	gErrorToText.init();
	init_supported_expressions();
	init_temp_jumps();
	gAllocationManager = new LLScriptAllocationManager();

	yyin = LLFile::fopen(std::string(src_filename), "r");
	if (yyin)
	{
		yyout = LLFile::fopen(std::string(err_filename), "w");

		// Reset the lexer's internal buffering.

	    yyrestart(yyin);

		b_parse_ok = !yyparse();

		if (b_parse_ok)
		{
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			char compiled[256];
			sprintf(compiled, "%s.o", src_filename);
			LLFILE* compfile;
			compfile = LLFile::fopen(compiled, "w");
#endif

			if(dst_filename)
			{
				gScriptp->setBytecodeDest(dst_filename);
			}

			gScriptp->mGodLike = is_god_like;
			
			gScriptp->setClassName(class_name);

			gScopeStringTable = new LLStringTable(16384);
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			gScriptp->recurse(compfile, 0, 4, LSCP_PRETTY_PRINT, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#endif
			gScriptp->recurse(yyout, 0, 0, LSCP_PRUNE,		 LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_SCOPE_PASS1, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_SCOPE_PASS2, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_TYPE,		 LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			if (!gErrorToText.getErrors())
			{
				gScriptp->recurse(yyout, 0, 0, LSCP_RESOURCE, LSPRUNE_INVALID,		 b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#ifdef EMERGENCY_DEBUG_PRINTOUTS
				gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_ASSEMBLY, LSPRUNE_INVALID,  b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#endif
				if(TRUE == compile_to_mono)
				{
					gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_CIL_ASSEMBLY, LSPRUNE_INVALID,  b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
				}
				else
				{
					gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_BYTE_CODE, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
				}
			}
			delete gScopeStringTable;
			gScopeStringTable = NULL;
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			fclose(compfile);
#endif
		}
		fclose(yyout);
		fclose(yyin);
	}

	delete gAllocationManager;
	delete gScopeStringTable;
	
	return b_parse_ok && !gErrorToText.getErrors();
}


BOOL lscript_compile(char *filename, BOOL compile_to_mono, BOOL is_god_like = FALSE)
{
	char src_filename[MAX_STRING];
	sprintf(src_filename, "%s.lsl", filename);
	char err_filename[MAX_STRING];
	sprintf(err_filename, "%s.out", filename);
	char class_name[MAX_STRING];
	sprintf(class_name, "%s", filename);
	return lscript_compile(src_filename, NULL, err_filename, compile_to_mono, class_name, is_god_like);
}


S32 yywrap()
{
#if defined(FLEX_SCANNER) && !defined(LL_WINDOWS)
	// get gcc to stop complaining about lack of use of yyunput
	(void) yyunput;
#endif
	return(1);
}

void line_comment()
{
	char c;

	while ((c = yyinput()) != '\n' && c != 0 && c != EOF)
		;
}

void block_comment()
{
	char c1 = 0;
	char c2 = yyinput();
	while (c2 != 0 && c2 != EOF && !(c1 == '*' && c2 == '/')) {
		if (c2 == '\n')
		{
			gInternalLine++;
			gInternalColumn = 0;
		}
		else if (c2 == '\t')
			gInternalColumn += 4 - (gInternalColumn % 8);
		else
			gInternalColumn++;
		c1 = c2;
		c2 = yyinput();
	}
}

void count()
{
	S32 i;

	gColumn = gInternalColumn;
	gLine = gInternalLine;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
		{
			gInternalLine++;
			gInternalColumn = 0;
		}
		else if (yytext[i] == '\t')
			gInternalColumn += 4 - (gInternalColumn % 8);
		else
			gInternalColumn++;
}

void parse_string()
{
	S32 length = (S32)strlen(yytext);
	length = length - 2; 
	char *temp = yytext + 1;

	S32 i;
	S32 escapes = 0;
	S32 tabs = 0;
	for (i = 0; i < length; i++)
	{
		if (temp[i] == '\\')
		{
			escapes++;
			i++;
			if (temp[i] == 't')
				tabs++;
		}
	}

	S32 newlength = length - escapes + tabs*3;
	yylval.sval = new char[newlength + 1];

	char *dest = yylval.sval;

	for (i = 0; i < length; i++)
	{
		if (temp[i] == '\\')
		{
			i++;
			// linefeed
			if (temp[i] == 'n')
			{
				*dest++ = 10;
			}
			else if (temp[i] == 't')
			{
				*dest++ = ' ';
				*dest++ = ' ';
				*dest++ = ' ';
				*dest++ = ' ';
			}
			else
			{
				*dest++ = temp[i];
			}
		}
		else
		{
			*dest++ = temp[i];
		}
	}
	yylval.sval[newlength] = 0;
}

